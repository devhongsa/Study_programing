좋은 코드 작성하기 

- 이름짓기 
- 캡슐화
- Enum
- Null
- 사이드이펙트 줄이기 




* 이름짓기?

이름을 지을땐 의미를 부여해야한다 
메서드의 이름은 기대하는 동작을 명확히 서술해야한다 (동사)
메서드의 이름과 다른 일을 하면 안된다.
이름을 지을땐 일정한 규칙을 갖고 일관성을 유지해야한다. (getXXX, setXXX)
축약어보다는 풀어서 쓴다.






* 캡슐화?
데이터와 그 처리방법을 숨김으로서 외부로부터 비즈니스 로직의 노출을 보호함.
자바 빈 규약 
    디폴트 생성자가 존재 
    모든 멤버가 private으로 선언되어 있다.
    멤버에 접근하기 위해 getter setter가 public으로 존재한다.







* 상수를 Enum? 으로 
public enum Month {

    JAN("Jan",1),
    FEB("Feb",2),
    MAR("Mar",3),
    APR("Apr",4),
    MAY("May",5),
    JUN("Jun",6),
    JUL("Jul",7),
    AUG("Aug",8),
    SEP("Sep",9),
    OCT("Oct",10),
    NOV("Nov",11),
    DEC("Dec",12);

    private String s;
    private int number;

    Month(String s, int n) {
        this.s = s;
        this.number = n;
    }

    public static int strToNumber(String s) {
        for (var m : Month.values()) {
            if (m.s.equals(s)) {
                return m.number;
            }
        }

        return -1;
    }
}







* Null?
Null 값은 java에서 예상치 못한 에러를 발생시킴 
예를 들어 파라미터로 String 타입을 받는 메서드가 있었을때 파라미터에 null값이 들어가면 에러가 발생하지 않음.
즉 null값이 그대로 들어가서 메소드안에서 로직이 실행되게 됨. 이런 상황에서 예상치못한 에러가 발생할 수 있음.

방지법 
isNull, inNonNull 사용하기 

Primitive type(기본 타입) 사용하기 (boolean, char, int, long, float, double ... )
기본 타입에는 Null값이 들어 올 수 없음.

Optional 사용하기 







* 사이드이펙트 줄이기 
메소드 하나에는 하나의 일만 하기 / 한번에 다뤄야할 문제의 크기를 줄이기 
순수함수로 만들기 
전역변수는 되도록 사용하지 말기 
불필요한 변수 제거하기 
불변객체(const, fianl) 사용하기 








