mainApplication에 @EnableScheduling  붙이기 
scheduler 패키지 생성 
////// Scheduler Example //////
@Slf4j
@Component
@EnableCaching
@AllArgsConstructor
public class ScraperScheduler {

    private final CompanyRepository companyRepository;
    private final DividendRepository dividendRepository;
    private final Scraper yahooFinanceScraper;

    @CacheEvict(value = CacheKey.KEY_FINANCE, allEntries = true) // finance에 해당하는 key값을 모두 지움, 하나만 삭제하고 싶으면 key 옵션을 추가 
    @Scheduled(cron = "${scheduler.scrap.yahoo}") // 0/5 * * * * * 매 5초마다 실행 , FixedDelay = 작업이 끝난후 5초뒤에 재실행, FixedRate = 5초마다 계속 실행 
    초 분 시 일 월(1~12) 요일(0~6)
    public void yahooFinanceScheduling(){
        // 저장된 회사 목록 조회
        List<CompanyEntity> companies = companyRepository.findAll();

        // 회사마다 배당금 정보 스크래핑
        for (var company : companies) {
            log.info("scraping scheduler is started -> "+company.getName());
            ScrapedResult scrapedResult = yahooFinanceScraper.scrap(Company.builder()
                    .name(company.getName())
                    .ticker(company.getTicker())
                    .build());
            // 스크래핑한 배당금 정보 중 DB에 없는 정보는 DB에 저장
            scrapedResult.getDividends().stream()
                    .map(e-> new DividendEntity(company.getId(),e))
                    .forEach(e -> {
                        boolean exists = dividendRepository.existsByCompanyIdAndDate(e.getCompanyId(), e.getDate());
                        if (!exists) {
                            dividendRepository.save(e);
                            log.info("insert new dividend -> " + e.toString());
                        }
                    });
            // 스크래핑 요청에 대한 rate limit 고려
            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) { // 스레드1이 3초동안 sleep중인데 다른 스레드가 스레드1을 깨울때 일어나는 에러 
                Thread.currentThread().interrupt();
                e.printStackTrace();
                //throw new RuntimeException(e);
            }

        }

    }
}


////// Scheduler Config ////// 스케쥴이 여러개일 경우 여러 스레드가 스케줄 작업을 실행해야하므로 Thread Pool을 생성해준다.
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.SchedulingConfigurer;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.scheduling.config.ScheduledTaskRegistrar;

@Configuration
public class SchedulerConfig implements SchedulingConfigurer {

    @Override
    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
        ThreadPoolTaskScheduler threadPool = new ThreadPoolTaskScheduler();

        // poolSize는 cpu 처리가 많은 경우 core개수 + 1
        // I/O 처리가 많은 경우 core개수*2
        threadPool.setPoolSize(Runtime.getRuntime().availableProcessors()); //현재 코어의 개수
        threadPool.initialize();

        taskRegistrar.setTaskScheduler(threadPool);
    }
}

Thread.currentThread().getName() 으로 현재 스레드 이름 출력가능