링크
    start.spring.io 
    gitignore.io 
    https://docs.google.com/spreadsheets/d/1fmNCfJAUOZylJW3n9nEYk8f_hsRYFai0aiKGJTwA1kY/edit#gid=1930466401  : api 설계 예시
    mockaroo.com : db 테스트 데이터 뽑아내기 
    https://github.com/djkeh/fastcampus-project-board

개발 기술 정리하기 : 필요할때마다 하나하나씩 추가
    Java
    SpringBoot
    Spring Web
    Spring Data JPA, H2 DataBase, Mysql Driver
    Rest Repositories,
    Rest Repositories HAL Explorer
    Thymeleaf
    BootStrap
    Spring Security
    Lombok, Spring Boot DevTools
    ...

start.spring.io
    Dependencies : Spring Web, Spring Data JPA, H2 DataBase, MySQL Driver, Rest Repositories, Rest Repositories HAL Explorer, Thymeleaf, Validation, Spring Security, Lombok, Spring Boot DevTools, Spring Boot Actuator

sdkman
curl -s "https://get.sdkman.io" | bash
source "$HOME/.sdkman/bin/sdkman-init.sh"
sdk version
sdk install java 11.0.17-zulu
sdk use java 11.0.17-zulu
sdk install gradle 7.3.1
sdk use gradle 7.3.1

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.7.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

github 레포지토리 생성
gitignore.io : java, intellij+all, gradle, macos
    gitignore에서 codeStyles, runConfigurations 도 제외해주기 
gitkraken에서 레포지토리 clone하기 
레포지토리 프로젝트 일정 생성하기

프로젝트 시작
JPA vs JDBC : JPA는 ORM(Object Relation Mapping, 메소드를 통해 CRUD), JDBC는 SQL Mapper(쿼리를 직접짜서 CRUD)
///// build.gradle /////
repositories 
    mavenCentral : 라이브러리를 다운받아오는 저장소, 회사의 자체 저장소에서도 불러올 수 있어서 회사의 저장소도 넣어줄수있음
dependencies
    implementation : 모든 시점에서 다 사용
    compileOnly : 컴파일 과정에서만 쓰이는 라이브러리
    annotationProcessor : 
    testImplementation : 테스트 하는 시점에만 사용 
///// 프로젝트 구조 /////
src > main > java > com.example.projectname >
    controller
        sampleController : RestAPI 구현, AccountService를 가져와서 AccountService의 메소드 사용
    service
        AccountService : AccountRepository를 가져와서 CRUD 메소드 구현. 메소드 사용은 controller가 함.
    domain
        Account : db 테이블 객체 구현
    repository
        AccountRepository : db테이블에 CRUD하기 위한 인터페이스 객체
    config
        Filter 구현
        Interceptor 구현
        redis 설정 등 
    dto
        요청받을때나 응답할때 쓸 객체 , entity를 그대로 응답하는 것은 위험, dto객체를 만들어서 필요한 데이터만 응답 
    exception
        ExceptionHandler 구현 @RestControllerAdvice
    aop
        @Aspect 
    type
        Enum type 



브랜치 전략 세우기 
    gitkraken  command + ,  누르고 gitflow 전략으로 이동
    dummy 브랜치를 하나 생성해놓고 gitflow의 master를 dummy브랜치로 develop을 main으로 설정해서 initialize
    feature 브랜치에서 개발을 진행하고 develop(main)브랜치로 머지 할것임.

    브랜치 진행 과정 
        1. feature 브랜치 생성. 이때 브랜치 이름은 #이슈번호-이슈내용 
        2. 만든 브랜치에서 작업 시작. 
        3. 작업이 완료되면 커밋후에 푸쉬(origin에 브랜치 추가됨.)
        4. origin/main 에 pull request 
        5. 코드 리뷰 후에 merge 수락 
        6. 브랜치 삭제

유스케이스 작성하기 
    draw.io 
    svg 파일로 저장 
이슈생성으로 할일 목록 구성, 이슈번호(#2) 커밋메세지 제목에 활용 필수
feature 브랜치에서 작업이 완료되고 pull requests -> main브랜치에 merge완료되면 꼭 feature브랜치 지워주기

api 설계하기 (https://docs.google.com/spreadsheets/d/1fmNCfJAUOZylJW3n9nEYk8f_hsRYFai0aiKGJTwA1kY/edit#gid=1930466401)
    endpoints
        종류 / url / method / 기능 / 설명 
    api spec 
        url / method / 입력 데이터 구상

spring boot 프로젝트 시작하기 
    환경 구성 : initializer 이용 

DB 연동 
    - mysql download 
    - Intellij database항목에서 DataSource mysql 추가. root 사용자, 비밀번호는 처음에는 없음. 기존에 설정해놓은 비밀번호있으면 입력 
    - Test Connection 후에 apply
    - 이후 db 계정, 권한 설정
        create database board;
        show databases;
        create user 'hongsa'@'localhost' identified by 'Dnjfchs23';
        select user from mysql.user;
        show grants for 'hongsa'@'localhost';
        grant all on board.* to 'hongsa'@'localhost' with grant option;
        flush privileges;

application 설정 세팅
    src.main.resources.application.properties 파일을 application.yaml 파일로 변경

// application.yml
## 로그 설정
    로그 라이브러리 : log4j, logback 
    로그 레벨
        1. Error : 즉시 조치를 취해야 하는 심각 수준 단계, 의도하지 않은 상황이 일어났을때 쓰는 로그 
        2. Warn : 서비스에 당장 지대한 영향을 끼치진 않지만 눈여겨 봐야하는 단계
        3. Info : 중요한 로직이 처리됐을때 쓰는 로그
        4. Debug : 개발 단계에서 자주 사용하는 로그
        5. Trace : 개발 단계에서 자주 사용하는 로그 
##############################################################################################################
##############################################################################################################
# logback-spring.xml 파일 resource 폴더에 저장 
# properties.yml 파일에 logging 설정 추가 
# logging:
    config: classpath:logback-spring.xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <property name="LOGS_PATH" value="./logs"/>
    <property name="LOGS_LEVEL" value="INFO"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <layout class = "ch.qos.logback.classic.PatternLayout">
            <pattern>%d{HH:mm} %-5level %logger{36} - %msg%n</pattern>
        </layout>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_PATH}/log_file.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <maxFileSize>10MB</maxFileSize>
            <maxHistory>60</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS_PATH}/error_file.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/%d{yyyy-MM-dd}_error.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
    </appender>

    <logger name="org.springframework" level="info"/>
    <logger name="org.hibernate" level="info"/>

    <root level="${LOGS_LEVEL}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="Error"/>
    </root>
</configuration>
##############################################################################################################
##############################################################################################################



# logback을 통해 debug 찍어낼 수 있지만, 로그가 너무많아서 우선 false로
debug: false
# actuator의 감춰진 기능을 모두 보여주는 옵션
management.endpoints.web.exposure.include: "*"

# boardproject에서 일어나는 로그들 debug설정
# servlet은 리퀘스트 리스폰스 요청 내용들을 debug로 보여줌.
# sql 쿼리문에 대한 로그들 debug
logging:
  level:
    com.devhong.boardproject: debug
    org.springframework.web.servlet: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

spring:
  datasource:
    url: jdbc:h2:mem:test       # H2 db 사용시 이렇게 url을 미리 정해줘야 매번 어플리케이션을 실행할때마다 db주소가 변경되지 않음.
    username: sa
    password:
    driverClassName: org.h2.Driver
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: hongsa
    password: Dnjfchs23
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    # test용 db만들때 사용
    defer-datasource-initialization: true   # 테이블을 다 만들고 나서 ddl문이 실행되도록 해줌.
    # DB관련 테이블 클래스를 만들면 알아서 DDL문을 만들어줌.
    hibernate.ddl-auto: create-drop   # 어플리케이션 실행할때 자동생성, 끌때 자동 삭제
    show-sql: true
    database: mysql  # 다른 DB쓰면 바꿔주기 
    properties:
      hibernate.format_sql: true
      hibernate.default_batch_fetch_size: 100
  h2.console.enabled: true
  sql.init.mode: always

---

spring:
  config.activate.on-profile: testdb
  datasource:
    url: jdbc:h2:mem:board;mode=mysql
    driverClassName: org.h2.Driver
  sql.init.mode: always
  test.database.replace: none

---
///////////////////////

ERD(Entity Relational Diagram) 만들기
    테이블 컬럼 구성, 테이블끼리의 관계 정의 

DB CRUD 테스트 코드 작성 
    mockaroo.com 에서 test DB 데이터 sql문 받아오기.
    run -> services(Run configuration type, spring boot 설정)로 옮겨서 테스트해보기 

Api 코드 작성하기 
    Rest Repositories : Api 공개범위 설정하기. annotated(어노테이션 설정한 Api만 공개) @RepositoryRestResource
    Hal explorer : Api 테스트해보는 환경

## Api Docs 만들기 (swagger)
1. 디펜던시 추가
implementation 'io.springfox:springfox-boot-starter:3.0.0'
implementation 'io.springfox:springfox-swagger-ui:3.0.0'

2. yml파일에 설정 추가 (swagger와 스프링 mvc패턴과 매치시켜주는 설정)
spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

3. config package에 SwaggerConfig 클래스 추가 
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                //.apis(RequestHandlerSelectors.any()) // basic-error-controller 까지 swagger에 나오게됨.
                .apis(RequestHandlerSelectors.basePackage("com.zbhong.weather"))
                .paths(PathSelectors.any())
                //.paths(PathSelectors.ant("/read/**")) // /read path에 있는 모든 mapping들만 swagger에 게시
                .build().apiInfo(apiInfo());
    }

    private ApiInfo apiInfo() {
        String description = "Welcome Log Company";
        return new ApiInfoBuilder()
                .title("SWAGGER TEST")
                .description(description)
                .version("1.0")
                .build();
    }

}


