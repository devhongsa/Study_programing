iancoleman.io/bip39  니모닉12단어 만드는곳
링크비 테스트넷 테스트이더 받는곳.
https://faucets.chain.link/rinkeby  


smart contract 기본 구조.
contract Basic{
  데이터타입과 데이터정의
  struct
  address
  mapping...

  이벤트 정의
  event EventName()...

  수정자 정의
  modifier onlychairman()...

  함수 정의
  function Addnum(){}...
}





////////////////// 블록체인 인 액션 4장 p.89////////////////// 
1.Node js 설치
2.Truffle 설치 node js command prompt 에서 npm install -g truffle  명령어 입력 
3.truffle version 명령어 입력하면 버전확인
4.가나쉬 설치 p.96  trufflesuite.com/ganache
5.smart contract 폴더 생성  ex) Ballot-Dapp > (ballot-app, ballot-contract) > 
6. ballot-contract 폴더에서 truffle init 명령어 실행 

contracts/  : 스마트컨트랙트를 위한 솔리디티 소스 파일. Migrations.sol은 프로젝트의 다른 스마트 컨트랙트 배포를 쉽게 해준다.
migrations/ : 마이크레이션은 자바스크립트로 만들어진 js파일로 개발 중인 스마트 컨트랙트의 변화를 관리한다.
test/ : 자바스크립트와 솔리디티 테스트
truffle-config.js : 트러플 설정파일. 블록체인 네트워크 ID, IP, RPC 포트 번호 같은 설정 정보가 들어있다.

7. ballot-contract > contracts 디렉토리에 스마트컨트랙트 파일 Ballot.sol 넣기.
8. ballot-contract 디렉토리 위치에서 명령어 truffle compile 실행.
9. build/contracts 디렉토리 생성. 웹애플리케이션과 블록체인 서버 간 통신(JSON-RPC)을 위한 json 파일 생성. 
* 이 json 파일은 ABI(Application Binary Interface)라고도 불리며, 웹 애플리케이션에서 스마트 컨트랙트로 보내는 호출과 모듈간의 데이터 송신에
사용될 인터페이스다.

10. truffle-config.js 에서 블록체인 네트워크 설정값 수정하기.
11. migrations 디렉토리에 2_deploy_contracts.js 파일 추가하기. -> Ballot.sol 배포를 위한 파일
var Ballot = artifacts.require("Ballot");       // 배포해야할 컨트랙트파일 이름 Ballot 

module.exports = function (deployer) {
    deployer.deploy(Ballot, 4);                 // Ballot의 constructor의 파라미터값으로 4 
};

*migrations에서 1_initial_migration.js 는 Migrations.sol 을 배포하기 위한 스크립트임. 접두어 1_, 2_ 는 마이그레이션 단계를 나타내므로
함부로 수정 하지말자.

12. ballot-contract 디렉토리로 가서 명령어 truffle migrate --reset 실행하여 스마트컨트랙트 배포.
* reset 옵션을 빼고 하면 이미 배포한 스마트컨트랙트는 배포하지 않음. --reset 기능은 테스트환경에서만 가능함.



// 여기까지 스마트컨트랙 만들고 배포하는 단계
// 이제부터 배포된 스마트컨트랙에 접근할 웹 애플리케이션 만들기.
Frontend 부분 p.104

13.ballot-app 디렉토리에서 npm init 명령어 실행.
package.json 파일생성 -> 디펜던시에 express설정.
{
  "name": "ballot-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"      //index.js 파일로 서버시작.
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.17.1"          //어떤 모듈을 사용할건지. 여기서는 express 모듈설정.
  }
}

14. ballot-app 디렉토리에 index.js 파일추가.
index.js : node js 서버 실행 스크립트로써, 서버포트 설정, src 아티팩트, 스마트컨트랙트 코드 연결, html 파일 연결함
var express = require('express');
var app = express();
app.use(express.static('src'));                                 // src 웹 아티팩트 폴더
app.use(express.static('../ballot-contract/build/contracts'));   // (RPC-JSON 통신) 웹애플리케이션과 블록체인 서버 통신위한 파일
app.get('/', function (req, res) {
  res.render('index.html');                                 // 웹 html 파일
});
app.listen(3000, function () {
  console.log('Example app listening on port 3000!');       //서버포트 3000
});

15. 웹어플리케이션 프론트엔드 부분 src 폴더 추가. 
css, fonts, images, js 포함
js는 특히 중요한데 여기에 app.js라는 파일이 있고 이 파일은 스마트컨트랙트 함수와 웹에서의 UI를 연결해주는 코드가 있다.

16. npm install 명령어 실행.
package.json 에 있는 디펜던시들을 모두 설치. node_modules 폴더, package-lock.json 파일 생성.

17. npm start 서버 실행.







/////////////블록체인 인 액션 5장 .  암호학 보안/////////////

비대칭 암호학.
1. 256비트 난수 생성 (개인키로 설정) -> 256비트 난수를 12개의 랜덤단어로 치환. Mnemonic bip39
2. 타원곡선암호학알고리즘 적용해서 공개키를 생성.
3. 해시 함수인 RIPEMD160을 공개키에 적용해서 어카운트 주소 생성. 160비트 16진수로 표현 (흔히말하는 우리 지갑주소)


Ropsten test blockchain에서 배포해보기 .
1. iancoleman.io/bip39 에서 mnemonic 12단어 만들기.
english, eth 설정
2. 메타마스크 ropsten 네트워크 선택 후 니모닉12단어로 계정접속.
3. IDE에서 스마트컨트랙트 컴파일 후, Injected Web3 환경으로 설정. 메타마스크 연결.
4. faucet.ropsten 에서 test eth 보내기.
5. 컨트랙트 배포. 


해싱이란?
임의의 크기를 가진 데이터를 표준화한 고정 크기의 값으로 매핑하는 전환을 말한다.
keccak256(abi.encodePacked(value, secret))    // value만으로 해싱하면, 랜덤숫자를 계속 대입해봄으로써 value값을 알아낼수 있지만.
                                              // secret 코드를 함께 해싱하면, 랜덤값을 대입해서 value값을 알아낼수가 없다.








/////////////////// 블록체인 인 액션 6장. 온체인과 오프체인 데이터 /////////////////////////////

일반적으로 블록체인상에 저장하는 모든 데이터는 온체인 데이터이고, 그 이외의 것은 오프체인 데이터이다.

온체인에 저장되는 데이터 
1. 실행하고 컨펌받은 트랜잭션
2. 스마트 컨트랙트 함수의 실행 결과
3. 상태변화(storage 변숫값에 일어난 변화)
4. 발생시킨 이벤트 로그 


블록체인 블록의 데이터 구조 
1. 블록헤더 - 2,3,4의 데이터 해시값 저장되어있음.
2. 트랜잭션 트리 - 트랜잭션 내용들의 집합 
3. 리시트 트리 - 트랜잭션 실행 결과 데이터, 이벤트 로크 데이터, 가스소비 데이터
4. 스테이트 트리 - 블록체인상의 모든 블록에 저장된 스마트 컨트랙트와, 다른 일반 어카운트 데이터 정보.