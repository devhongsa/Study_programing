데이터베이스 설계이론 

스케일 업(scale up) : 서버의 기능을 높임
스케일 아웃(scale out) : 서버를 여러대로 늘림

데이터베이스는 웹서버에 비해 스케일업, 스케일 아웃하는 것이 비용이 상당하게 든다. 
그렇기 때문에 데이터베이스에서 병목현상이 자주 발생 할 수 밖에 없고, 이를 해결 하기위한 다양한 방법들이 존재한다. 
대표적인 방법은 캐시를 이용한 방법이다. 
또한 데이터베이스를 잘 설계하여 조회 쓰기 과정을 효율적으로 수행할 수 있게 하는 방법이다.


데이터베이스 정규화 : 중복을 최소화하게 데이터를 구조화하는 프로세스

정규화 특징
1. 중복을 제거하고 한 곳에서 관리 (원본데이터를 한곳에서만 관리하고, 다른 곳에서 이 데이터를 조회할때는 원본데이터를 참조해서 조회하도록함)
2. 데이터 정합성을 유지하기 쉬움.(즉 같은 데이터가 여러군데 나뉘어져 있으면, 그 데이터가 바뀌어야 할때 모든 곳에 가서 다 고쳐줘야하지만, 정규화하면 이런 불편이 감소한다)
3. 조회시 참조 발생 (즉 정규화를 한다는 것은 쓰기에 이점을 둔 방식)

반정규화 특징
1. 중복을 허용
2. 데이터 정합성을 유지하기 어려움 
3. 참조없이 조회 가능 

정규화시 고려해야 하는 것
- 얼마나 빠르게 데이터의 최신성을 보장해야 하는가?
- 히스토리성 데이터는 오히려 정규화를 하지 않는 것이 좋다.(바뀌지 않는 데이터)
- 데이터 변경 주기와 조회 주기는 어떻게 되는가?
- 객체(테이블) 탐색 깊이가 얼마나 깊은가?

정규화시에 테이블 조인
- 테이블 조인은 테이블의 결합도를 엄청 높이기 때문에, 조회 성능을 높이는 최적화 기법을 사용하는데 제한이 있을 수 있다.
- 조인으로 한번에 가져오는 것보다는 쿼리를 한번 더 쓰는것이 더 나을 수도 있음.

데이터베이스는 결국 디스크에 데이터가 저장된다. 디스크는 읽고 쓰는 시간이 메모리보다 훨씬 느리기 때문에
메모리를 활용한 읽기 쓰기 기술이 필요하다. 
하지만 메모리의 특성상 서버가 다운되면 메모리에 있던 데이터는 모두 날아가기 때문에, 이를 방지하기 위한 WAL(Write Ahead Log)기술이 있다.
WAL은 쿼리내용을 로그파일로 저장해놓고 만약 메모리에 있는 데이터가 날아갈 시 이 파일을 로드해서 다시 작업을 시작할 수 있다. 

디스크에 데이터를 저장하는 방식은 랜덤I/O와 순차I/O가 있는데 랜덤은 디스크의 랜덤 저장위치에 찾아가서 저장하는 방식이고 
순차는 저장위치의 순서대로 데이터를 저장하는 방식이다.

랜덤IO는 순차IO보다 속도가 느리기 때문에, 결국 데이터베이스 성능의 핵심은 디스크의 랜덤IO를 최소화하는 것이다. 


데이터베이스 성능의 핵심 ** 인덱스 **
인덱스란 정렬된 자료구조를 말함. 예를 들어 유저들의 정보가 저장된 테이블에서 나이가 가장 어린유저를 찾고싶다고 하면
인덱스를 설정 안해줬을 경우 모든 유저들의 나이를 다 봐야된다. 
하지만 나이컬럼을 인덱스로 설정해준다면 내부적으로 나이순으로 정렬된 테이블에서 첫번째 데이터를 찾기 때문에 조회하는데 훨씬 짧은 시간이 걸린다.
즉 인덱스의 핵심은 탐색(검색)범위를 최소화 하는 것이다.