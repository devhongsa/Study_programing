자료구조 이론

자료구조란?
    프로그램에서 사용할 많은 데이터를 메모리 상에서 관리하는 여러 구현방법들
    효율적인 자료구조가 성능 좋은 알고리즘의 기반이 됨
    자료의 효율적인 관리는 프로그램의 수행속도와 밀접한 관련이 있음
    여러 자료 구조 중에서 구현하려는 프로그램에 맞는 최적의 자료구조를 활용해야 하므로 자료구조에 대한 이해가 중요 

선형 자료구조 종류 (Array, LinkedList, Stack , Queue)

Array vs LinkedList 
    Array는 메모리 장소와 크기를 미리 정해놓고 시작을함. 순서가 정해져있음
    그래서 만약 Array 중간위치에 데이터를 삽입하면, 그 위치부터 끝 위치까지 자리를 하나씩 이동해야하고, 데이터를 삭제할때도 
    다시 데이터위치가 땡겨져야함. 그래서 데이터 삽입과 삭제에 있어서는 효율이 느림. 반면 데이터 인덱스 위치가 모두 정해져있기 때문에 
    데이터의 조회에 있어서는 좋은 효율을 보여줌.

    반면 LinkedList는 앞의 메모리위치가 다음 메모리위치를 기록하고 있는 구조이기때문에 데이터를 삽입하고 삭제할때 앞의 메모리위치와 삽입되는 메모리위치에서만 다음 메모리 위치를수정해주면 됨. 

    그래서 데이터 삽입과 삭제에 있어서는 LinkedList가 훨씬 빠름. 반면 데이터 조회에 있어서는 메모리의 처음 위치부터 끝까지 찾아가야 하기 때문에 조회성능은 떨어짐.

Stack vs Queue 
    Stack은 탑쌓기처럼 나중에 들어온 메모리가 가장 먼저 나오는 구조 
    Queue는 선착순 줄서기 처럼 먼저 들어온 메모리가 가장 먼저 나오는 구조이다. 

Heap : 이진트리(부모노드보다 크거나 같은값, 작거나 같은값이 자식노드가 된다.), 이진 검색 트리(노드값의 중복허용 x, 부모와 자식노드의 값이 같을 수 없음.)
Graph : 노드와 노드간의 관계, 네비게이션 설계할때 사용 
Hashing : 검색을 위한 자료 구조, key-value 로 이루어진 dictionary 구조 