git과 heroku cli 설치되어있어야함.
https://programming4myself.tistory.com/5 설명서 

window는 git bash 터미널 열고 heroku login 
macos는 터미널 열고 heroku login 

heroku에서 코드실행할 프로젝트 폴더 생성. 

//////Procfile  파일생성 ///////
worker: python 파일이름.py 
clock: python clock.py 
web: node app.js     /// nodejs로 웹 배포시 


///////requirements.txt 파일생성///////
패키지이름 작성 (pip freeze > requirements.txt)


///////runtime.txt  파일생성 (없어도 됨)///////
python-3.8.13


////////clock.py (일정시간마다 실행시키려면 필요)///////
from apscheduler.schedulers.blocking import BlockingScheduler
import updateDB

sched = BlockingScheduler()

# @sched.scheduled_job('interval', minutes=3)
# def timed_job():
#     print('This job is run every three minutes.')

@sched.scheduled_job('cron', day_of_week='mon-sun', hour=20)
def scheduled_job():
    updateDB.startUpdate()
    
sched.start()

이미존재하는 앱 pull
heroku git:clone -a myapp


heroku에 프로젝트 배포하는법 
프로젝트폴더내에서 
git init 
heroku create 프로젝트명 --region eu          //프로젝트앱이 이미 있으면 안해도 됨. --region 옵션 안넣으면 us가 default
heroku git:remote -a [앱이름] 
git add . 
git commit -m "commit message" 
git push heroku main 

프로젝트 파일 수정후 재배포하기 
git add . 
git commit -m "commit message" 
git push heroku main 
git push heroku main --app ep-updatedb

만약에 heroku git repository를 못찾는다고 나오면 
heroku git:remote -a [앱이름] 

현재 heroku 상태 
heroku ps 

파이썬 파일 heroku에서 실행하기 
heroku ps:scale worker=1
heroku ps:scale worker=0  실행취소 
heroku ps:scale clock=1   일정시간마다 실행켜기 

heroku config:add TZ="Asia/Seoul"   히로쿠 타임존 맞춰야 clock 실행가능 
heroku logs --tail 로그 보기 
heroku run bash -a <APP 이름>  : 히로쿠 서버 커맨드 실행 
heroku open 장고로 배포했을때 홈페이지 열기

heroku 컴퓨터에 환경변수 설정하기 
heroku 홈페이지에서 앱 settings 들어가면 config vars 에서 key - value 입력 
혹은
heroku config:set 환경변수_키=환경변수_값   // 환경변수 설정
heroku config:unset 환경변수_키            // 환경변수 삭제
heroku config:get 환경변수_키              // 환경변수 가져오기 
이렇게 설정하고 나서 파이썬 파일안에서 

import os 

변수 = os.environ.get('환경변수_키')  로 사용가능 

heroku 서버 경로 확인 
heroku login
heroku run bash -a APPNAME
$ cd app


///////////////////////troubleshoot ///////////////////////////
nodejs로 웹 배포할때 NPM 설치시 버전 충돌로 인한 배포 실패 일어날때 : 터미널에서 node --version , npm --version 쳐보고 package.json 에서 
"engines": {
    "node": "16.14.2",          /// 내 로컬 버젼 입력 
    "npm": "8.5.0"
  }
추가 

서버에 npm 모듈을 추가하고 싶으면, package.json 에 모듈을 넣어주고나서 npm install을 해주고 push를 해줘야함
