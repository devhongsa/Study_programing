마이크로서비스는 각각의 서비스를 독립된 서비스로 분리하여 관리하는 서비스이다. 
이때 중요한 것은 각각 독립된 서비스들 끼리의 인터렉션이 원할하게 이루어져야 되고 
이를 위해 message broker(rabbitMQ, kafka)와 같은 중개자 역할의 기술이 필요하다.


마이크로 서비스 초기설계 
마이크로서비스 구분(독립성이 최우선) : 마이크로서비스는 각 서비스마다 독립적인 db를 가지고 있기 때문에 만약 서비스간의 공통된 데이터가 많으면
그만큼 db에도 중복적인 데이터가 저장된다는 것이고, 이는 sync맞추는데도 큰 작업이 따르게 된다. 그렇기 때문에 서비스는 각각의 최대한 독립적으로 
운영될 수 있는 환경이 구성되어야 한다.





MicroService 폴더생성
django-admin startproject serviceName
서비스 폴더안에서 requirements.txt 생성 

Django==3.1.3
djangorestframework==3.12.2
mysqlclient==2.0.1
django-mysql==3.9
django-cors-headers==3.5.0
pika==1.1.0


Dockerfile 생성 
FROM python:3.9
ENV PYTHONUNBUFFERED 1
WORKDIR /app
COPY requirements.txt /app/requirements.txt
RUN pip install -r requirements.txt
COPY . /app

CMD python manage.py runserver 0.0.0.0:8000


docker-compose.yml 생성
version: "3.9"
services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    volumes:
      - .:/app
    depends_on:
      - db

  db:
    container_name: mysql
    image: mysql:8.0
    platform: linux/amd64
    restart: always
    environment:
      MYSQL_DATABASE: fastcampus
      MYSQL_USER: hongsa
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: rootadmin
    volumes:
      - .dbdata:/var/lib/mysql
    ports:
      - 33066:3306
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci


docker-compose up 
    no matching manifest for linux/arm64/v8 in the manifest list entries 오류 발생시 docker-compose.yml에서 platform: linux/amd64 추가

docker-compose exec backend sh  : docker-compose 컨테이너 bash 실행

django settings.py 수정
Installed app 에 'user_order.apps.UserOrderConfig', 추가
                'rest_framework',
                'corsheaders',

middleware에 'corsheaders.middleware.CorsMiddleware', 추가

database 수정 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'fastcampus',
        'USER': 'hongsa',
        'PASSWORD': 'root',
        'HOST': 'mysql',
        'PORT': '3306'
    }
}
#여기서 HOST는 docker-compose.yml에서 설정한 mysql container 이름임 

CORS_ORIGIN_ALLOW_ALL = True   추가


이후 django 서버 구현 시작. (models, serializers 등등)
container bash에서 python manage.py makemigrations, python manage.py migrate 실행, 로컬에서 하면 안댐