참고 블로그 
https://hudi.blog/
https://incheol-jung.gitbook.io/docs/q-and-a/java


https://socrates-dissatisfied.tistory.com/9  데이터 분석가, 엔지니어, 사이언티스트 차이
https://www.luniverse.io/ten-blockchain-usecases/?lang=ko 블록체인 활용 사례 




##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
#### Spring #####
기술 면접 대비 https://swk3169.tistory.com/192

- Spring Bean 이란 ?
Spring Ioc(제어의 역전) 컨테이너에 등록된, 컨테이너가 관리하는 자바 객체를 Bean이라고 한다. Bean은 메소드에 사용되고 
Component는 클래스에 사용된다. Bean은 메소드의 리턴객체를 빈으로 등록한다.

- Spring MVC 동작 
https://velog.io/@matcha_/Spring-Spring-MVC-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC
클라이언트 url request-> Dispatcher servlet -> HandlerMapping -> HandlerAdapter -> Controller -> view resolver -> view -> client 

- JPA 영속성 컨텍스트 
https://velog.io/@neptunes032/JPA-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EB%9E%80

- dirty checking / 더티체킹 주의점
https://everydayyy.tistory.com/157
https://brunch.co.kr/@purpledev/32


- 어노테이션 역할  
https://velog.io/@potato_song/Java-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EB%A7%8C%EB%93%A4%EA%B8%B0
기능을 하는 것이 아닌 정보전달 역할 

- @Transactional 프록시 
https://velog.io/@ann0905/AOP%EC%99%80-Transactional%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC
트랜잭션은 객체 외부에서 처음 진입하는 메서드를 기준으로 동작한다. 즉 처음 실행되는 메소드에 @Transactional이 붙어있지 않으면 
그 메소드안에서 실행되는 메소드가 @Transactional이 붙어있다 하더라도 트랜잭션이 동작하지 않게 된다. 


- Redis lock 
https://hudi.blog/distributed-lock-with-redis/


- Filter, Interceptor, AOP 
https://carnival.tistory.com/77







##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
#### Java ####
기술 면접 대비 https://beforb.tistory.com/6

- jvm 동작 원리 및 GC 
https://steady-snail.tistory.com/67
https://jeong-pro.tistory.com/148
https://1-7171771.tistory.com/140

- OOP 객체지향프로그래밍 
https://www.codestates.com/blog/content/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8A%B9%EC%A7%95

추상화 : 객체의 공통적인 속성과 기능을 추출하여 정의, 인터페이스, 추상클래스 
상속 : 대표적인 추상화인 인터페이스가 역할에 해당하는 껍데기만 정의해두고, 하위 클래스에서 구체적인 구현을 하도록 강제하는 것에 비해, 상속 관계의 경우 상황에 따라 모든 구체적인 내용들을 정의해두고 하위 클래스에서는 그것을 단순히 가져다가 재사용할 수 있습니다.
다형성 : 어떤 객체의 속성이나 기능이 상황에 따라 여러 가지 형태를 가질 수 있는 성질(오버로딩, 오버라이딩) / 하나의 객체로 여러개의 객체를 다룰수 있게됨.
    어떤 객체가 다른 여러개의 객체를 참조해야한다면, 다른 여러개의 객체를 공통된 하나의 참조객체(인터페이스)로 묶으면, 그 인터페이스만 참조하면 됨. 
캡슐화 : 클래스 내부의 데이터(멤버변수)와 메소드를 외부로부터 감추는 것을 말함.

- 추상클래스 vs 인터페이스 
https://wildeveloperetrain.tistory.com/112

추상클래스
    - 추상클래스는 직접 객체 생성 불가능 
    - static 이나 final이 아닌 필드를 가질 수 있음 (인터페이스는 무조건 static final)
    - 일반 메소드 생성 가능 
    - public protected private 접근제어자 모두 사용 가능 
    - 상속을 통해서만 사용 가능, 하위 클래스의 생성자에서 super()를 통해서 초기화 
    - 다중 상속 불가능 extends
인터페이스 
    - static final(상수)와 abstract method의 집합 
    - 구현부가 있는 일반 메소드와 일반 멤버 변수 선언 불가 
    - 모든 메소드는 public abstract로 선언, 모든 멤버변수는 public static final 로 생성 
    - 다중 상속 가능 implements


- java compile 과정 
https://velog.io/@minseojo/Java-%EC%9E%90%EB%B0%94-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EA%B3%BC%EC%A0%95-JVM-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0


- Garbage Collector 


- GC 메모리 누수 
https://junghyungil.tistory.com/133


- 객체 직렬화 역직렬화 
직렬화는 자바객체를 json형태로 바꿔주는 것을 말한다. 역직렬화는 그반대
Controller에서 객체를 반환해줄때 Dto객체를 주로 사용하는데 이때 Dto객체는 getter setter가 있어야 직렬화 역직렬화가 가능하다.


- BCryptPasswordEncoder 
java에서 비밀번호 암호화로 사용한 BCryptPasswordEncoder는 단방향 해시함수 암호화 방법이다. 
단방향은 비밀번호를 해시값으로 변환하면 다시 원본으로 복호화가 불가능 하다. 
단지 비밀번호 확인 시 해시값을 대조하는 것으로 비밀번호가 맞는지 틀린지 판단하는 것. 
BCryptPasswordEncoder는 비밀번호에 솔팅값을 포함해서 해시값으로 변환한다. 즉 같은 비밀번호라도 솔팅값이 다르면 해시값은 달라진다. 
레인보우 테이블를 이용한 무차별 대입공격(Brute force attack)을 대비하기 위함이다. 


- generic 제네릭
https://inpa.tistory.com/entry/JAVA-%E2%98%95-%EC%A0%9C%EB%84%A4%EB%A6%ADGenerics-%EA%B0%9C%EB%85%90-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%B3%B5%ED%95%98%EA%B8%B0


- hashcode 와 equals
https://velog.io/@mooh2jj/equals%EC%99%80-hashCode%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94%EA%B0%80


##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
#### 파이썬 ####
Multiprocessing vs Threading vs AsyncIO
https://ivdevlog.tistory.com/3


##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
#### 데이터베이스 ####

- 트랜잭션 및 ACID  Isolation level 
https://sabarada.tistory.com/117

- N+1 문제, 연관관계매핑을 지양하라 
https://incheol-jung.gitbook.io/docs/q-and-a/spring/n+1
연관관계 설정시 N+1 문제 발생 : fetch join 이나 @EntityGraph로 해결가능 








##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
#### 공학 지식 ####

- Rest API 
https://khj93.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-REST-API%EB%9E%80-REST-RESTful%EC%9D%B4%EB%9E%80








##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
#### 기타 기술 면접 #### 
- 서비스 아키텍쳐 / 시스템 확장 
https://hudi.blog/system-design-interview-alex-xu-1/











 














11. Restful API vs Graphql 
https://velog.io/@devjooj/GraphQL-%EA%B0%9C%EB%85%90%ED%8E%B8


12. Python Multiprocessing , Pool vs Process 
https://sjblog1.tistory.com/74
https://m.blog.naver.com/townpharm/220951524843


13. Sync vs Async, Blocking IO vs NonBlocking
https://jammdev.tistory.com/168

14. python GIL 
https://it-eldorado.tistory.com/160
https://ssungkang.tistory.com/entry/python-GIL-Global-interpreter-Lock%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C

15. jpa 낙관적락 vs 비관적락 
https://reiphiel.tistory.com/m/entry/understanding-jpa-lock





내가 가장 열정적으로 참여했던 프로젝트 
- mosa 
어떤 프로젝트 
누구와 함께 
내 역할 
기여한 파트 
겪었던 어려운점 
실력 향상 





면접관에게 질문 
- 개발자로 커리어를 쌓아오시면서 느끼셨던 개발자로서의 고충, 위기 
- 우선 저는 개발공부를 시작한지도 얼마 안됐고, 우연히 전직장에서 개발에 대한 흥미가 생겨서 개발자신입으로 개발자를 시작했을때와 지금을 비교해봤을때, 
