WWW (World Wide Web)
Hyper Text : 한 문서에서 다른 문서로 이동할 수 있는 일종의 링크 기술.
HTTP(Hyper Text Transfer Protocol)

웹을 구성하는 3대 요소 (HTML, HTTP, URL)

client : 서비스를 제공 받는 측 (web browser)
server : 서비스를 제공해주는 측 (web server, web application server)

client가 server에게 http request message
server가 client에게 http response message

여기서 HTTP란 서버와 클라이언트간에 통신규약, 즉 어떤 언어로 서로 소통할 것인가에 대한 약속이라고 보면됨.
URL은 client가 server에게 어떤 서비스를 요청할 것인지에 대한 내용이다.
HTML(Hyper Text MarkUp Language)은 server보내준 서비스내용(데이터)들을 어떻게 화면에 보여줄 것인가에 대한 내용이다.

url 예약문자 
    ? : 파라미터가 시작 된다는 것을 알려줌. 사용자(client)의 입력값이 파라미터 값으로 들어감.
    = : 파라미터 값 대입.
    & : 다음 파라미터 식별자.
    + : 공백 

url인코딩 이란? 
    예를 들어 특정 사이트의 비밀번호를 ?가 포함되게 만들었다면 이것이 서버측으로 전달될때는 예약문자로 인식하게되버린다. 
    이를 막기 위해 ?는 %3F로 변환해서 보내면 서버는 예약문자가아닌 문자 ?로 인식하게 된다. 이렇게 변환하는 것을 url인코딩이라고 한다.

URL vs URI 
URL은 서버의 특정파일이 어디에 위치하는지 식별하는 주소이고, URI는 특정자원을 나타내는 주소값을 말한다.(uri는 API개발을 통해 나오는 주소)

Http message구조 
HTTP/1.1 200 OK              :  http버전 상태코드 응답문구 
Content-Type: text/html      : 헤더 명 : 헤더 값
빈줄
<html>                       : 바디 
</html>

get방식에서는 파라미터부분이 헤더에 실리지만
post방식에서는 파라미터부분이 바디에 실려서 가게 된다.

상태코드 
1XX 정보
2XX 성공
3XX 리다이렉션
4XX 클라이언트 에러
5XX 서버 에러

응답문구
200 OK 
302 Found
304 Not Modified
400 Bad request 클라이언트 요청에러
403 Forbidden 접근권한 없음, 로그인을 안했다거나
404 Not Found 존재하지 않음, 없는 페이지를 요청함
500 Internal Server Error 서버측에러


Cookie 와 Session 
Cookie,Session : 상태 유지 및 관리, 사용자 인증 수단

Cookie 원리
    client가 아이디와 비밀번호를 입력해서 server측에 로그인 요청.
    server는 아이디, 비밀번호 확인 후 회원정보가 확인되면 http response 헤더에 Set cookie를 통해 해당 회원의 쿠키값을 실어서 보냄 
    client에서 서버에서 보내온 그 쿠키값을 client 하드디스크에 저장함
    이후 client가 서버측에 요청을 보낼때마다 저장되어 있는 쿠키값을 http request 헤더에 실어서 보냄.
    sever측은 쿠키값이 오면 인증된 사용자라는 것이 확인되고, 계속 회원의 로그인 상태를 유지하게 되는 것임.
    이후 회원이 로그아웃 요청을 보내면, 서버는 set cookie에 쿠키값을 삭제하라는 메세지를 response 헤더에 실어서 보냄
    client는 저장되어 있던 쿠키값을 삭제함 

cookie의 단점
    쿠키값은 client측에서 폐기가 되더라도, 그 쿠키값만 알고있다면 헤더에 실어보내서 재사용이 가능함.
    또한 쿠키값이 평문이라면 더욱더 보안에 취약하여 탈취당할 수 있음.
    이에 암호화 과정이 필수적으로 필요하고, 암호화에 필요한 키 관리 등 신경써야 할 부분들이 많아짐.

Session 원리
    client가 아이디와 비밀번호를 입력해서 server측에 로그인 요청.
    server는 아이디, 비밀번호 확인 후 회원정보가 확인되면 http response 헤더에 Set cookie를 통해 해당 회원의 세션값을 실어서 보냄 
    이때 server측에서는 세션값을 키값으로 갖고, 회원 정보를 value값으로 하는 세션정보를 server측 메모리, 파일, DB 중에 저장해놓음. 
    client는 서버로부터 온 세션값을 저장해놓고, 다음 요청부터 세션값을 헤더에 실어서 서버에 요청함.
    server는 client로부터 온 세션값을 확인해 본 후, 회원정보가 확인되면 로그인 상태가 유지되는 것임.
    client가 로그아웃을 요청하면 server에서는 session 키값을 삭제해버림. 

session의 단점
    session은 폐기후 재사용가능성도 없고, 세션값자체가 아무 의미없는 문자의 나열값이기 때문에 암호화도 필요가 없어서 
    cookie의 단점을 완벽히 보안해주지만, 치명적인 단점으로 사용자가 많아지는 경우에는 서버측에 과도한 부하를 주게 된다. 
    즉 서버측에서는 대규모 웹 서비스인 경우에 세션값 저장에 DB를 사용할 것이고, 이는 대규모의 회원이 서버에 요청을 할때마다 
    DB서버에 엄청난 부하를 주게 되고 서버 성능 저하를 일으킨다.

즉 웹 서비스의 규모와 인프라 구성에 맞게 세션과 쿠키를 알맞게 사용해야한다.



웹 브라우저 동작 순서 
    - 웹 브라우저 크롬 접속 후 URL 입력
    - 도메인(naver.com)의 IP변환 작업 
        - 로컬 DNS(Domain Name System) 캐시 확인(전에 접속한 이력이 있으면 캐시에 저장되어있음.)
        - 캐시에 없으면 hosts 파일 참조 
        - 파일에도 없으면 DNS서버에 질의 
    - 도메인에 해당하는 ip 받아서 http 요청 메시지 제작 


우리가 url로 서버에 자원을 요청하는 것들은 웹 서버에 어떠한 설정된 경로로 인해 가능하며, 이렇게 웹 서버에서 
바라보는 경로를 웹 디렉토리, 웹루트, 도큐먼트 루트 등으로 부른다. 
이 설정 파일은 파일 다운로드/업로드 취약점 공격 시 많이 활용된다.
