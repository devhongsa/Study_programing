homebrew 
brew search 패키지이름 
brew info 패키지이름 
brew install 패키지이름 
brew upgrade 패키지이름 
brew uninstall 패키지이름 
brew update      // homebrew 업데이트 



###################네트워크 기본#########################

ip address 구조 
0.0.0.0 총4파트, 1파트당 8비트 * 4  =  ip의 최대갯수는 2^32 개 

A class ip
  앞에 1파트가 network bit, 이고 나머지 뒤 3파트는 host bit이다. 
  A class는 맨앞 1비트가 0으로 시작해야한다. 즉 A class 네트워크 종류는 2^7개 이며 한네트워크당 2^24개의 ip를 가질 수 있다. 

B class ip 
  앞에 2파트가 network bit 이고 나머지 뒤 2파트는 host bit이다. 
  B class는 맨앞 2비트가 10으로 시작해야한다. 즉 B class 네트워크 종류는 2^14개 이며 한네트워크당 2^16개의 ip를 가질 수 있다. 

C class ip 
  앞에 3파트가 network bit 이고 나머지 뒤 1파트는 host bit이다. 
  C class는 맨앞 3비트가 110으로 시작해야한다. 즉 B class 네트워크 종류는 2^21개 이며 한네트워크당 2^8개의 ip를 가질 수 있다. 

서브넷 : 특정 네트워크를 여러개로 나누는것. 
  211.11.124.0/25  이런식으로 표현된 ip가 서브넷이라고 할 수 있음. 뒤에 /25 숫자는 나눠진 네트워크에서 변하지않는 비트의 갯수를 말함.(CIDR 표기법)
  서브넷 마스크 : 255.255.255.0  이거는 서브네팅(네트워크를 나누는것)을 하지 않은 상태. 255.255.255.128 이거는 /25 로 나눴다는 뜻 

  이러한 기술들은 결국 각 클래스로 나눠진 네트워크를 운영중인 서비스의 규모에 맞게 분할하여 사용하기 위한 기술이다. 
  따라서 이런 기술을 통해서 A Class 네트워크와 같은 매우 큰 네트워크를 작게 나눠서 사용하면서, 낭비되는 IP주소 자원을 최소화하려는 것이 주된 목적이다.

############################################################
############### VPC? (Virtual Private Cloud) ###############
############################################################

특징 
  계정 생성시 default로 VPC를 만들어 줌.
  만들어진 VPC 위에 EC2, RDS, S3등의 서비스 활용가능
  서브넷 구성 가능
    private subnet : 오직 속해있는 VPC 내부에서만 통신가능. 주로 DB같은 중요한 정보를 저장하는 곳으로 씀.
      외부인터넷과 차단되어 있는 특징때문에 mysql과 같은 db프로그램을 다운받고 업그레이드하는 것이 불가능해서, 
      외부인터넷과 연결할 필요가 있을땐 public subnet으로 우회해서 요청을함. 이 서비스를 NAT Instance(EC2), NAT Gateway 라고 함.
    public subnet : 다른 VPC와도 통신가능.
  보안 설정 
  VPC peering(VPC간의 통신)
  IP대역 지정 가능 
  VPC는 하나의 region에만 속할 수 있음.

Region > VPC > AZ > Subnet   
AZ는 하나의 region안에 자연재해와 같은 비상상황을 대비하기 위해서 데이터센터를 분리해놓은 거라고 보면 됨. 보통 한 region당 2개이상의 AZ가 존재함.

Internet Gateway (IGW) : 외부 VPC와 통신하기 위한 통로. private subnet은 IGW 와 연결되어있지 않음.

Route Table : 통신을 위해 ip정보를 table로 보내면 table에 정한 규칙대로 특정 ip대역은 local로, 그 외의 ip대역은 IGW로 가라 라는 이정표라고 생각하면됨.
  private subnet은 route table에 igw로 가라는 이정표 자체가 없음.

NACL(Network Access Control List) : 보안 규칙. 특정 ip는 막는다던지 하는. stateless
Security Group : 보안 규칙. stateful
NACL vs Security Group 
  NACL은 인바운드 아웃바운드 설정시. 무조건 설정대로 따르기때문에, 어디서 요청이 들어왔건 간에, 요청이 들어오고 나갈때 이 규칙을 무조건 따르므로 보안이 높음.
  반면 보안그룹은 규칙에 있어서 어디서 요청이 왔는지, 요청종료에 따라 예외로 처리되는 부분들이 있기 때문에 보안이 좀 낮음.

NAT instance, NAT gateway : private subnet에 있는 인스턴스가 외부 인터넷과 통신하기 위해 쓰는 방법. Nat instance는 public subnet에 통신전용 
  instance를 만들어 private subnet의 인스턴스와 외부 인터넷을 연결시켜주는 역할을 한다. NAT gateway는 private ec2의 요청을 NAT gateway가 받아서
  IGW로 연결해 주는 역할을 한다.
Bastion host : 외부 사용자가 private subnet에 있는 인스턴스와 통신하기 위한 방법. Bastion host는 public subnet에 있는 인스턴스임.

VPC endpoint : private subnet 인스턴스가 AWS의 다양한 서비스를 자유롭게 이유할 수 있게 해주는 방법. VPC밖으로 트래픽이 나가지 않음.
  interface Endpoint : private Ip를 활용한 방법.
  gateway Endpoint : route table을 통한 방법

NAT gateway와 endpoint의 차이 : NAT gateway는 igw로 연결되어 트래픽이 외부로 노출되는 반면 endpoint는 트래픽이 외부로 노출되지 않음.

통신맵
internet <=> IGW <=> Router <=> Route Table <=> NACL <=> VPC (public, private)


############################################################
############### VPC 생성하기 ###############
############################################################

VPC는 region마다 default로 하나씩 만들어져 있음. 
VPC는 region마다 구분이 되어있기때문에 서울지역에서 생성한거랑 미국지역에서 생성한거랑 완전히 다름.

-나만의 vpc 하나 따로 생성. IPv4 CIDR 10.0.0.0/16
-vpc를 생성하면 라우팅 테이블, NACL 자동으로 생성됨. Subnet, IGW ,NAT gateway, endpoint는 생성 안됨.
-subnet 생성 
  private subnet : 10.0.1.0/24
  public subnet : 10.0.0.0/24
-IGW생성 : 처음엔 detached 상태임. 아직 어떤 vpc에도 연결이되어있지않은 상태임. 생성한 vpc와 연결.
-rtb는 default로 하나 생성되어있음. 이 기본테이블을 private subnet과 연결시키고, 새로운 rtb를 따로 만들어서 public subnet과 연결.
  이때 public subnet과 IGW를 연결시켜줘야지 외부와 통신을 할 수 있기때문에 라우팅 테이블에 0.0.0.0/0 ip주소가 요청이 오면 igw로 연결되게 설정해줘야함.
  이미 default로 있던 설정 10.0.0.0/16 local은 유지. 이 사이드블록 ip요청은 모두 local로 보내고 그 외에 ip주소는 모두 igw로 연결해줌.

-NACL 설정 : NACL은 VPC만들때 default로 하나 만들어져 있어서 subnet을 만들면 모든 subnet이 이 default nacl을 따르고 있음. 
  private NACL과 public NACL 규칙을 따로 만들어줘야 하기 때문에 , NACL을 새로 하나 생성해서 subnet을 따로 배정해주자.

public NACL 설정 : 
  인바운드 규칙
  규칙번호 100, 사용자 지정 TCP, 포트범위 22, 소스 0.0.0.0/0, 허용
  200, ;;, 80, ;;, ;; 
  300, ;;, 443, ;; ,;;

  보통 포트범위는 0~65535 까지 있음. 1024~65535포트는 임시포트로써 request에 대한 response가 이 임시포트를 사용하게됨.
  포트22는 SSH , 포트80은 HTTP, 포트443은 HTTPS 요청이다.

  여기서 규칙번호는 어떤 요청이 왔을때 체크할 규칙순서라고 보면됨. 즉 번호가 먼저일수록 그 규칙을 먼저 체크를함.
  만약 규칙번호 101로 포트22 거부를 설정추가해도, 이 규칙은 100번 규칙으로 인해 무시가 될 것임.

  아웃바운드 규칙 
  규칙번호 100, 사용자 지정 TCP, 포트범위 1024-65535, 대상 0.0.0.0/0, 허용

  이렇게 설정을 하면 인바운드규칙을 통과해서 들어온 요청에 대해서 모두다 response를 해주겠다는 의미이다. 임시포트를 다 열어줬기 때문.

############################################################
############### 내가 구성한 VPC위에 인스턴스 올리기 ###############
############################################################

1. EC2 서비스 화면으로 이동
2. 인스턴스로 들어가서 인스턴스 시작
3. AMI, 운영체제 선택
4. 인스턴스 유형, 컴퓨터 성능 선택 앞에 t로시작하는지 c로 시작하는지 각 특장점들이 있기 때문에 따로 공부가 필요함.
5. 네트워크 설정
    vpc(virtual private cloud) : 나만을 위한 인스턴스 공간, 프로젝트가 여러개라면 각각 다른 vpc공간을 사용하는것이 권장됨.
      내가 직접 만들어낸 vpc공간을 선택해서 이 위에 ec2를 올릴 수 있음.
    서브넷 : 마찬가지로 내가 구성한 VPC안에 서브넷도 구성해놨으면, 그 서브넷위에 ec2를 세울 수 있음. (public 혹은 private 서브넷)
    퍼블릭 IP 자동 할당 : 공공ip를 할당해서 이 ip를 통해 요청할 수 있게끔, 이거 활성화되어있어야 ec2로 요청보내는 등 테스트 진행가능(private 서브넷은 퍼블릭ip 필요없음)
6. 보안그룹 설정.
    VPC내에서 NACL을 설정해준것과 같이 여기서도 설정가능. 이미 만든 보안그룹이 있으면 그 보안그룹으로 설정.
6. 고급 세부 정보 
    스팟 인스턴스 요청 : 최대로 지불할 요금선을 정해서 그 이상 과금이 안나오게함.
    IAM : collaborator 설정 
    storage: 8GiB 기본, 범용 SSD 기본
7. 인스턴스 개수 : 서버개수 설정

8. 키페어 : 키페어 pem 파일이 있어야 서버 접속가능 

############################################################################
############### Bastion Host 만들고 private subnet ec2와 통신하기 ###############
############################################################################

public subnet에 ec2(bastion host) 만들기. 퍼블릭 IP 활성화, 키페어 등록/생성 
보안그룹설정 : public ec2에서 private ec2로 접속할 것이기 때문에 public ec2에 ssh 포트 22만 열어줘도 됨. 모든 ICMP도 열어줘도 무방.

private subnet에 ec2 만들기. 퍼블릭 Ip 비활성화. 키페어 등록/생성 
**보안그룹설정 : public ec2에서의 ssh요청을 받을 것이므로 SSH 포트22번에 사용자지정 public 보안그룹만 허용 설정.
              모든 ICMP 0-65535 포트 사용자지정 public 보안그룹만 허용 설정.

**이때 public subnet의 NACL설정에서 만약 모든트래픽허용을 안해주고 SSH만 허용해줬으면 private ec2에서 오는 응답을 못받기때문에 통신이 안된다.

Nat gateway 생성 : public subnet에 생성. 탄력적 IP 할당. 연결유형 퍼블릭 
private subnet의 routing table에 가서 0.0.0.0/0의 요청을 위에 만든 nat gateway로 보내주는걸로 설정추가. natgateway는 이를 igw로 연결
이렇게 하면 private ec2에서 sudo yum install mysql 같은 명령어 수행가능 

이후 public ec2에 private ec2 keypair 파일 저장하기 : scp -i publickeypair.pem privatekeypair.pem ec2-user@퍼블릭ip:/home/ec2-user
public ec2 ssh 접속 -> public ec2에서 private ec2 ssh 접속.

### windows 에서는 pageant putty 검색 -> pageant putty puttygen 설치 
puttygen : pem파일을 ppk로 변환
pageant : ppk로 변환된 pem파일 등록 
putty : public ip 주소를 ip address에 복붙, ssh체크 => 옆에 ssh-Auth에서 allow agent forwarding 체크 => connection-data에서 username ec2-user설정 
      =>설정값 저장하고 open 누르기 => 커맨드창에 ssh privateIP 입력 




###########################################
vpc endpoint만들고 사용하기
###########################################
private ec2에서 s3서비스와 같은 AWS서비스를 외부트래픽 유출없이 사용하고 싶을때 사용 
IAM 역할 생성 : s3 fullaccess 역할 만들기.
바스티온 호스트(public ec2)와 private ec2(**s3 IAM 권한 줘야함) 생성
S3 생성
  버킷이름 설정
  리전 설정
  퍼블릭 액세스 차단 설정 : 체크해야지 나만 접근가능 해제하면 모든 유저가 다 들어와서 볼수있기때문에 치명적임. 추후에 IAM 관리를 통해서 접근가능한 유저 설정 가능.
  버킷 버전 관리 : git과 같이 버전 관리를 통해 일정 시점으로 롤백할 수 도 있는 기능. 비활성화 
private ec2 접속.
aws s3 ls --region [region위치]   : 해당 region에 있는 s3 버켓 리스트 보여줌. 이때 원래 이게 안되야 정상. endpoint없이 이게 된다는 것은 라우팅 테이블에 
  nat gateway가 설정되어있기때문임. 이는 외부에 트래픽이 노출되므로 s3전용 endpoint를 만들어 s3관련 요청은 endpoint를 사용하게 설정해야함.
vpc endpoint생성
  서비스에서 s3검색. 리전에 맞는 gateway 선택 
  vpc선택 
  라우팅 테이블은 private 전용 테이블로 체크하고 생성.
  그러면 라우팅 테이블에 endpoint관련 설정이 자동으로 추가되어있음.
private ec2에서 다시 aws s3 ls --region [region위치] 입력하면 이제 nat gateway가 아닌 vpc endpoint를 사용하게 됨.
  




awscli 설치 
https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/getting-started-install.html
aws --version
aws help 
aws ec2 help


aws 무료계정가입
aws 액세스키 생성하기 
내 계정 클릭 후 보안 자격증명 들어가기 
액세스키 생성. csv파일 생김. 

MFA 설정 : otp 만드는거라고 생각하면 됨.


비용 발생시 경보 생성.
db관련 과금 주의사항
https://velog.io/@arara90/AWS-Free-tier%EB%A1%9C-RDS-%EC%82%AC%EC%9A%A9-%EC%A4%91-%EC%9A%94%EA%B8%88%EC%9D%84-%EC%A7%80%EB%B6%88%ED%96%88%EC%96%B4%EC%9A%94
계정의 결제 대시보드로 이동  결제기본설정에서 프리티어 사용량 알림받기 설정, 결제 알림받기 설정 체크 
이후 cloud watch서비스로 이동해서 경보 -> 결제로 이동후 새 경보생성한다. 이후 지표선택후에 경보생성.
sns를 이메일로 설정했으면 , 인증메일올텐데 거기서 컨펌눌러야 경보가 오게됨.

aws 비용 계산기 
https://calculator.aws 

리소스 정리해주는 오픈소스
aws-nuke 

프리티어 계정이 만료가 되면, bippr0901+a@gmail.com 이런식으로 새 계정을 만들어 주면 bippr0901이메일로 동일하게 이메일을 받을 수 있고, 
프리티어 계정을 새로 만들수있음. 

aws configure 로  키와 시크릿 등 설정. 
aws sts get-caller-identity   내 자격증명 확인하기 
aws ec2 describe-key-pairs    내 ec2에 등록된 key pair 목록 불러오기 

aws configure --profile [profileName]   새 profile 설정하기 

aws configure get region   default 지역 가져오기 
aws configure get region --profile [profileName]

export AWS_PROFILE = [profileName]  환경변수 설정 (default가 이 프로필로 바뀜 )



AWS 주요 서비스들 
AWS EC2 : 가상의 컴퓨팅 서비스 
AWS Lightsail : 가상의 프라이빗 서버 
AWS Auto Scaling : 서버 사용량이 증가하면 자동으로 서버 증설, 감축 해주는 서비스 
AWS Workspace : 회사 문서들을 가상의 공간에 저장하는 서비스 

AWS Route53 : 내 서버와 domain을 연결해주는 서비스 
AWS VPC : 가상의 네트워크 서비스 
AWS Direct Connect : 실제 물리적컴퓨터와 가상의 컴퓨터를 연결하여 정보전달하게 해주는 서비스 
AWS ELB : 부하분산 서비스 (Auto scaling과는 약간 종류가 다름 )

AWS S3 : 여러가지 파일을 형식에 구애 받지 않고 저장 
AWS RDS : 관계형 DB 서비스 
AWS DynamoDB : NoSQL DB 서비스 
AWS ElasticCache: in-memory 기반의 cache 서비스 (redis같은거)

AWS Redshift : 데이터 분석에 특화된 스토리지 시스템 
AWS EMR : 대량의 데이터를 효율적으로 관리할 수 있게 해주는 서비스 
AWS Sagemaker : 머신러닝 데이터분석을 위한 클라우드 환경 제공 

EC2 서비스 : AWS 서버를 만들 수 있는 곳 
    인스턴스 : 서버

    네트워크 및 보안
        탄력적 IP : AWS에서 ip를 하나 받아서 내 인스턴스와 연결을 할 수 있음.
        보안 그룹 
            인바운드 규칙 : 내 서버에 어떤 요청을 허용할것인지, 특정ip만 요청할 수 있게 하는 등, 보안설정

    로드 밸런싱
        로드 밸런서 : 서버에 부하가 걸렸을때, 똑같은 서버를 자동으로 늘리고 줄이는 규칙을 설정하는 곳




인스턴스 연결
1. EC2 인스턴스 연결 : 그냥 연결누르면 됨. 
2. SSH 클라이언트 연결 : pem 파일 있는 위치로 가서, aws 사이트 ssh 클라이언트 연결부분에 적혀있는 명령어들 실행 , 
    chmod는 pem파일의 접근permission 설정하는 명령어임.   ls -al 하면 현재 파일들의 permission 설정들을 볼 수 있음.
    명령어 다 입력하면 fingerprint 물어보는데 yes 하면 됨.

인스턴스 중지, 종료.
인스턴스를 중지를 해도 비용은 계속 발생함. 종료(삭제)를 해야지 비용발생이 안됨.
스냅샷 기능은 삭제한 인스턴스가 다시 필요해질 상황을 대비해서 미리 백업을 해두는 기능. 비용발생.


S3?
S3는 저장소라고 생각하면 됨. 여러가지 파일들을 저장하거나 웹사이트도 호스팅할 수 있음.



파일,폴더 업로드하기 (올라가는 파일들을 객체라고 표현을 함.)
권한 : 파일마다 접근권한을 설정해줄수있음
속성 : 스토리지 클래스는 보통 standard로 설정을 하고 자주 안꺼내보는 파일들은 밑에목록들을 사용하면됨. 비용이 저렴해짐.
업로드가 되면 객체에 파일에 들어가서 속성을 확인할 수 있음. 이때 url이 뜨게 되는데 여기로 접속을 해도 퍼블릭 액세스를 막아놨기때문에 다운로드가 안됨.
하지만 버켓 퍼블릭액세스를 풀고, 객체 액세스도 풀면  저 url로 들어갔을때 파일이 다운로드가 됨.



aws-sdk?  사용하기 (nodejs에서 s3 버켓에 있는 파일들 불러서 쓰거나, 파일을 업로드할때 사용)
npm 프로젝트 폴더 생성
npm install @aws-sdk/client-s3
s3 버킷 접근하기 위한 IAM 설정 필요 
aws iam 서비스로 들어가서 사용자 추가 
    사용자 이름 설정
    AWS 액세스 유형선택 : 액세스 키 방식(key,secret) , 암호 방식 (그냥 비밀번호 치고 들어가기)
    권한설정 부분에서 s3 검색시 , full access , read only 등 다양한 접근권한 종료가 있음 원하는 권한 체크후 생성

플젝 폴더에서 libs 폴더 생성 후 s3Client.js 파일 생성
const { S3Client } = require("@aws-sdk/client-s3");
// Set the AWS Region.
const REGION = "us-east-1";
// Create an Amazon S3 service client object.
const s3Client = new S3Client({
  region: REGION,
  credentials: {
    accessKeyId: "",
    secretAccessKey: "",
  },
});

module.exports = { s3Client };


플젝 메인 위치에서 index.js 파일 생성
const { ListBucketsCommand } = require("@aws-sdk/client-s3");
const { s3Client } = require("./libs/s3Client");

const run = async () => {
  try {
    const data = await s3Client.send(new ListBucketsCommand({}));
    console.log("Success", data.Buckets);
    return data; // For unit tests.
  } catch (err) {
    console.log("Error", err);
  }
};
run();



RDS? 
데이터베이스 생성하기 
1. DB 종류 선택
2. DB 인스턴스 식별자 : 기본 이름말고 알아보기 쉬운 이름 설정 권장.
3. 퍼블릭 설정 : 퍼블릭으로 열어줘야 사용자이름과 암호, 엔드포인트만 있으면 어느 곳에서든 디비접속가능
default로 생성
4. 보안설정 인바운드 규칙에서 포트를 열어줘야지 mysql workbench라던지 postgresql pgamdin 으로 연결이 가능함.

