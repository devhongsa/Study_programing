##############################################
ubuntu 환경 docker, docker-compose, kubectl, kustomize, minikube 설치 
##############################################

cat > install-docker.sh 
아래 내용 붙여넣기
#!/usr/bin/env bash
## INFO: https://docs.docker.com/engine/install/ubuntu/

set -euf -o pipefail

DOCKER_USER=ubuntu

# Install dependencies
sudo apt-get update && sudo apt-get install -y \
  apt-transport-https \
  ca-certificates \
  curl \
  gnupg \
  lsb-release

# Add Docker’s official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# Set up the stable repository
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker CE
sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io

# Use Docker without root
sudo usermod -aG docker $DOCKER_USER

#########

chmod u+x install-docker.sh 
./install-docker.sh
exit 하고 다시 ubuntu 접속해야 docker permission 반영되서 사용가능. 


docker-compose 설치하기 
cat > install-docker-compose.sh 
아래내용 붙여넣기 
#!/usr/bin/env bash
## INFO: https://docs.docker.com/compose/install/

set -euf -o pipefail

DOCKER_COMPOSE_VERSION=v2.1.1

# Download and install
sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
############

chmod u+x install-docker-compose.sh
./install-docker-compose.sh


kubectl 설치하기 
cat > install-kubectl.sh 
아래내용 붙여넣기 
#!/usr/bin/env bash
## INFO: https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management

set -euf -o pipefail

# Install dependencies
sudo apt-get update && sudo apt-get install -y \
  apt-transport-https \
  ca-certificates \
  curl \
  gnupg \
  lsb-release

# Add kubectl's official GPG key
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg

# Set up the repository
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# Install kubectl
sudo apt-get update && sudo apt-get install -y kubectl
#################

chmod u+x install-kubectl.sh
./install-kubectl.sh



kustomize 설치하기 
cat > install-kustomize.sh 
아래내용 붙여넣기
#!/usr/bin/env bash
## INFO: https://kubectl.docs.kubernetes.io/installation/kustomize/binaries/

set -euf -o pipefail

KUSTOMIZE_VERSION=v4.4.1

# Download kustomize binary
curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/kustomize/${KUSTOMIZE_VERSION}/hack/install_kustomize.sh"  | bash

# Install to /usr/local/bin
sudo install -o root -g root -m 0755 kustomize /usr/local/bin/kustomize
#####################

chmod u+x install-kustomize.sh
./install-kustomize.sh


minikube 설치
cat > install-minikube.sh 
아래내용 붙여넣기
#!/usr/bin/env bash
## INFO: https://minikube.sigs.k8s.io/docs/start/

set -euf -o pipefail

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube
######### 

chmod u+x install-minikube.sh 
./instgall-minikube.sh



#############################################################
Mac OS환경에서 docker, docker-compose, kubectl, kustomize 설치하기 
#############################################################

brew install --cask docker
brew install kubectl 
    docker에도 내장 kubectl이 있는데, 내장 kubectl과 충돌을 일으키면 brew link --overwrite kubernetes-cli 하면됨.
brew install kustomize
brew install minikube

minikube start --driver docker : cluster 구성 
cat ~/.kube/config

apiVersion: v1
clusters:
- cluster:
    certificate-authority: /Users/hongseungmin/.minikube/ca.crt
    extensions:
    - extension:
        last-update: Thu, 17 Nov 2022 15:13:28 KST
        provider: minikube.sigs.k8s.io
        version: v1.28.0
      name: cluster_info
    server: https://127.0.0.1:64046
  name: minikube
contexts:
- context:
    cluster: minikube
    extensions:
    - extension:
        last-update: Thu, 17 Nov 2022 15:13:28 KST
        provider: minikube.sigs.k8s.io
        version: v1.28.0
      name: context_info
    namespace: default
    user: minikube
  name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube
  user:
    client-certificate: /Users/hongseungmin/.minikube/profiles/minikube/client.crt
    client-key: /Users/hongseungmin/.minikube/profiles/minikube/client.key

여기서 context부분은 어떤 user(여기서는 minikube user)로 어떤 cluster(여기서는 minikube cluster)에 접속할 것인지에 대한 내용임.

minikube status 
minikube pause  일시중지
minikube start
minikube stop   중지
minikube unpause 재개
minikube delete 삭제

kubectl help 
minikube help  쳐보면 명령어들이 나와있음.




####################################
Docker, Docker-compose 기본 개념
####################################
Docker가 나오게된 배경
    개발서버에서 개발한 개발환경을 그대로 복제해서 배포서버에 그대로 배포하고 싶을때 (AMI 와 같은 기능)
    같은 서버에서 독립적인 개발 환경을 여러개 만들고 싶을때 (가상환경과 같은 기능)

가상환경도 비슷한 기능을 하지만 컴퓨팅 파워를 가상환경마다 수동으로 정해줘야함.
그래서 상황마다 컴퓨팅파워가 유동적으로 분배되지 못하는 단점이 있음.

도커는 컴퓨팅 자원을 공유해서 쓰므로 유동적으로 컨테이너에 컴퓨팅파워가 분배될 수 있다.
그리고 도커 컨테이너를 생성하면 이에 대한 이미지를 생성할 수 있어서 똑같은 컨테이너를 무한히 생성할 수 있음( auto scaling과 같은 기능)

Docker-compose
docker 컨테이너끼리의 상호작용이 필요할때, 컨테이너간의 관계를 정의해 주는 것이 docker-compose기능임.
예를들어 컨테이너2는 컨테이너1이 먼저 생성된 후에 생성되어야 한다는 규칙이라든지 이런것들을 설정하는 역할.

# docker network 구조 
호스트 ip(eth0) : 메인서버의 ip
docker0 : docker 엔진에 의해 기본으로 생성되는 브릿지 네트워크 veth와 eth간 다리 역할 
container 마다 veth(virtual eth)가 생성되고 각각의 ip를 가지게됨.

docker network ls 
docker network driver 
  bridge 
  host
  none 
  overlay : multi host networking에서 쓰임. 여러 서버들의 네트워크를 연결하는 역할.

docker run -i -t --net none ubuntu:focal   : none네트워크


####################################
Docker 기본 명령어 
####################################
docker run [image] 
docker create [image] 
docker start [container] 
docker ps -a 
docker images 
docker inspect [container]  : 컨테이너 상세정보 확인 
docker image inspect [imageName]
docker pause [container]
docker unpause [container]
docker stop [container]
docker kill [container] : 강제종료 
docker stop $(docker ps -a -q) : 컨테이너 모두 중지 
docker rm [container] : 삭제(실행중인 컨테이너는 불가)
docker rm -f [container] : 강제삭제 (실행중인 컨테이너 종료 가능)
docker rm -f $(docker ps -a -q)    모든 컨테이너 지우기
docker rmi -f $(docker images -q)  모든 이미지 지우기
docker container prune : 중지된 모든 컨테이너 삭제

docker run --entrypoint sh ubuntu:focal  : --entrypoint는 docker ps 쳤을때 나오는 COMMAND 부분을 조작할 수 있는 명령어임.
docker run -i -t -e MY_HOST=fastcampus.com ubuntu:focal bash : 컨테이너 내 환경변수 설정하기 
docker run -i -t --env-file ./sample.env ubuntu:focal env : 컨테이너에 환경변수들 설정되어있는 env파일 내용 심고 환경변수 확인하기.

docker exec [container] [command] : 실행중인 컨테이너에 명령어 실행하기 
docker exec -i -t my-nginx bash : my-nginx컨테이너에 bash 셸로 접속하기 
docker exec my-nginx env : my-nginx 컨테이너의 환경변수 확인하기 

docker run -d -p 80:80 nginx   : 서버ip로 80번포트 요청이오면 컨테이너에 80번포트로 요청을 전달하겠다는 뜻. (hostPORT:containerPORT)
docker run -d -p 127.0.0.1:80:80 nginx : 호스트IP 127.0.0.1에 80번포트로 오는 요청만 컨테이너로 전달하겠다는 뜻. 
  curl 서버퍼블릭ip:80 으로 요청하면 connection 실패함.
docker run -d --expose 80 nginx : --expose옵션은 그저 문서화 용도일뿐 실제 80포트로 바인딩하지는 않음.

docker logs [container] : 전체 로그 확인
docker logs --tail 10 [container]
docker logs -f [container] : 실시간 로그 스트림 확인
docker logs -f -t [container] : 로그마다 타임스탬프 표시

/var/lib/docker/containers/[containerID]/[containerID]-json.log  :  linux ubuntu 호스트서버의 컨테이너 로그 저장 경로 
nc -U ~/Library/Containers/com.docker.docker/Data/debug-shell.sock : macos는 여기 쉘로 들어가고 나서 위 경로로 가야 있음.

로그용량 제한하기 (3mb로 제한, 최대 로그파일 5개로 설정.)
docker run \
-d \
--log-driver=json-file \
--log-opt max-size=3m \
--log-opt max-file=5 \
nginx


docker run \ 
-i    호스트의 표준 입력을 컨테이너와 연결
-t    TTY 할당
-it   : -i 와 -t 옵션을 합쳐놓은거, 이 옵션을 넣어야 컨테이너안에서 터미널 실행 가능 
--rm  컨테이너 실행 종료 후 자동 삭제 
-d    백그라운드 모드로 실행 
--name hello-world  컨테이너 이름 지정 
-p 80:80    호스트:컨테이너 간 포트 바인딩 
-v /opt/example:/example  호스트:컨테이너 간 볼륨 바인딩 (호스트볼륨)
  #호스트볼륨 
  host-volume.sh 파일에
    docker run \
      -d \
      -v $(pwd)/html:/usr/share/nginx/html \
      -p 80:80 \
      nginx
  이후 host-volume.sh 파일실행하면 현재 메인서버에 있는 html폴더와 컨테이너 경로에 있는 html폴더가 바인딩되어서 공유하게된다.

  #컨테이너 볼륨
  container-volume.sh 파일
    docker run \
      -d \
      -it \
      -v $(pwd)/html:/usr/share/nginx/html \
      --name web-volume \ 
      ubuntu:focal 

    docker run \
      -d \
      --name fastcampus-nginx \
      --volume-from web-volume \
      -p 80:80 \
      nginx 

    docker run \
      -d \
      --name fastcampus-nginx2 \
      --volumes-from web-volume \
      -p 8080:80 \
      nginx
  
  #도커 볼륨 
  docker volume create --name [volumeName] : 이거 실행하면 호스트서버에 /var/lib/docker/volumes/[volumeName]/_data 생성됨.

  docker-volume.sh 
    docker run -d \
    --name fastcampus-mysql \
    -e MYSQL_DATABASE=fastcampus \
    -e MYSQL_ROOT_PASSWORD=fastcampus \
    -v [volumeName]:/var/lib/mysql \
    -p 3306:3306 \
    mysql:5.7

container-volume은 volume역할을 host 서버가 아닌 볼륨전용 컨테이너를 만들어서 이 컨테이너를 다른 컨테이너들과 바인딩시키는 것을 말함.
docker inspect [container] 에서 Mounts 부분이 어떤 디렉토리를 볼륨마운트하고 있는지 나옴.

-v /opt/example:/example:ro  :  컨테이너가 호스트서버의 볼륨만 읽을 수 있고, 컨테이너에서는 writing이 안됨.

fastcampus/hello-world:latest   실행할 이미지 이름 
my-command    컨테이너 내에서 실행할 명령어 


##############################################
Dockerfile 
##############################################

### Dockerfile 없이 이미지 생성하기 
docker run -it --name my_ubuntu ubuntu:focal  : 우선 기본 unbuntu 도커컨테이너 생성하기 
docker commit -a fastcampus -m "add my_file" [containerName] [imageName설정] : -a는 누가 변경점을 만드는지 표기, -m은 커밋메세지 남기기 

이때 새로 만든 image는 ubuntu:focal 이라는 이미지를 토대로 만들어졌는데, docker image inspect [만든imageName]해보면 
RootFS 부문에 layers가 ubuntu:focal의 layers에서 layer가 한단계 더 쌓여있는 거를 확인할 수 있다.

### Dockerfile로 이미지 생성하기 (https://docs.docker.com/engine/reference/builder)
##############################################
Dockerfile?
FROM busybox    # 베이스 이미지 가져오는 명령어(library에서 가져옴)
LABEL maintainer="FastCampus Park <fastcampus@fastcampus.com>"   # 이미지의 메타데이터 설정. 나중에 이미지가 많아지면 label을 통해 관리용이

ENV FOO=/bar    #컨테이너의 환경변수 설정.
WORKDIR ${FOO}  # WORkDIR /bar,  cd /bar 라고 생각하면됨 어디서 작업을 수행할건지 정해줌.
ADD . $FOO      # ADD . /bar 
COPY \$FOO /quxx # COPY $FOO /quux,  COPY source destination , 호스트서버의 source를 복사해서 이미지의 경로 destination에 붙여넣음
COPY package*.json ./    # package.json을 워킹디렉토리에 붙여넣음

RUN npm install    # npm install 명령어 실행.

COPY . .    # 호스트서버의 현재디렉토리에 있는 모든 것을 이미지 디렉토리에 모두 복사해라 

EXPOSE 8080  # 이 컨테이너가 8080포트를 사용할것이라는 뜻. 실제로 바인딩되는 것은 아니고 단순히 알려주는 용도 

ARG user1=hongsa   #변수 설정하고 값 할당.
또는 docker build --build-arg user1=hongsa .   # 이런식으로 빌드시에 argument 전달 가능. Dockfile에 user1이라는 변수가 정의가 되어있어야함.
  # 이때 ENV와 ARG 명령어 수행시 변수이름이 같다면, ENV변수가 ARG변수를 덮어씌우게 됨. 

CMD ["node", "server.js"]     # cmd 명령어 수행
##############################################

Dockerfile이 있는 위치에서 명령어 수행
docker build -t my_app:v1 .    : -t는 tag생성.
docker build -t my_app:v1 -f example/MyDockerfile .    :-f 는 현재 경로에 있는 Dockerfile이 아닌, 다른 경로에 있는 Dockerfile을 쓰겠다는 의미

build시작하면 맨처음에 build Context를 daemon한테 전달한다는 내용이 있는데, build Context란 build명령을 수행한 현재 디렉토리를 말한다.
docker가 이미지를 빌드하려면 현재의 작업폴더(프로젝트폴더)를 모두 알아야 되기때문에 만약 작업폴더의 용량이 많다면 build도 오래걸릴 것임. 
그래서 작업폴더내에서 이미지로 안만들어도 되는 파일들을 생략할 수 있는 .dockerignore 기능도 있음. (.gitignore와 동일한 문법)

### IMAGE 압축파일로 저장하고 불러오기 
docker save -o ubuntu_focal.tar [imageName]
docker load -i [압축파일이름(ubuntu_focal.tar)]



##############################################
Dockerhub 이미지 저장소 이용하기  https://hub.docker.com
##############################################
github 이메일과 비번 동일 
계정settings에 security에 들어가서 access token 생성.

docker login -u devhongsa  
access token 입력 

repository 새로 생성. (my-docker)

docker images  로 내가 push할 이미지 확인

docker tag [imageName]:[TAG] devhongsa/my-docker:[tagname]       
  #[TAG]는 docker images 쳤을때 나오는 이미지의 TAG 적어야함. devhongsa/my-docker 는 도커레포지토리 이름 [tagname]은 자유 
docker push devhongsa/my-docker:[tagname]
docker pull devhongsa/my-docker:[tagname]


##############################################
AWS ECR(Elastic Container Registry) 저장소 이용하기 
##############################################
private repository 생성 
aws 자격증명 및 docker 로그인 
푸시명령보기에서 자세한 내용 확인(위의 내용과 거의 동일)

docker tag [imageName]:[TAG] ***.amazonaws.com/[ECR repository Name]:latest
docker push ***.amazonaws.com/[ECR repository Name]:latest



##############################################
docker 이미지 경량화 하기 
##############################################
꼭 필요한 패키지 및 파일만 추가 

컨테이너 레이어 수 줄이기 
  Dockerfile 의 지시어 수가 곧 레이어이기 때문에 지시어를 줄이면 경량화된다. RUN 같은 지시어를 한번만 쓰도록 설계 
  RUN \
    apk add --no-cache bash curl git && \
    git clone https://github.com/course-hero/slacktee/slacktee && \
    apk del --no-cache git 
  && 으로 여려 명령어를 합치기
  --no-cache 옵션으로 불필요한 캐시 지워서 경량화하기 

경량 베이스 이미지 선택 
  slim, alpine
  FROM node:16-slim 
  FROM node:16-alpine 


멀티 스테이지 빌드 사용
  FROM node:16-alpine AS base 
  LABEL maintainer="FastCampus Park <fastcampus@fastcampus.com>"

  WORKDIR /app 

  COPY package*.json ./

  FROM base AS build 
  RUN npm install 

  FROM base AS release 
  COPY --from=build /app/node_modules ./node_modules
  COPY . .
  EXPOSE 8080 
  CMD ["node", "server.js"]

##############################################
docker 데몬 디버깅 
##############################################
docker system events : container의 생성과 삭제까지의 로그들을 실시간으로 보여줌 
docker system df : 도커의 디스크 사용량 현황 
docker system df -v : 상세한 내용 확인가능 
docker system prune : 사용되지않고있는 컨테이너, 네트워크 , 이미지 , 캐시 모두 삭제 가능 
docker stats : 컨테이너들이 cpu, memory를 얼마나 사용하고 있는지 확인 가능 



##############################################
docker-compose 사용하기 
##############################################
docker-compose? 
단일 서버에서 여러 컨테이너를 프로젝트 단위로 묶어서 관리 
docker-compose.yml 파일을 통해서 명시적으로 관리 
프로젝트 단위로 도커 네트워크와 볼륨 관리 
프로젝트 내 서비스 간 의존성 정의 가능 
프로젝트 내 서비스 디스커버리 자동화 
손 쉬운 컨테이너 수평 확장 

docker-compose.yml 구조 
version: '3.9'
services:
  db:
    image: mysql:5.7
    volumes:
    - db:/var/lib/mysql
    restart: always
    environment:
    - MYSQL_ROOT_PASSWORD=wordpress
    - MYSQL_DATABASE=wordpress 
    - MYSQL_USER=wordpress 
    - MYSQL_PASSWORD=wordpress
    networks:
    - wordpress 

  wordpress:
    depends_on:
    - db
    image: wordpress:latest 
    ports:
    - "8000:80"
    restart: always 
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
networks 
volumes 

docker-compose -p my-project up -d : -p는 프로젝트명, -d는 백그라운드 실행 
docker-compose ls -a : 도커컴포즈 목록 
docker-compose down -v : volume까지 모두 삭제 
docker-compose -p my-project up --scale web=3 -d : my-project의 web 서비스 컨테이너를 3개로 늘리기.

docker-compose -p my-project logs 
docker-compose -p my-project events 
docker-compose -p my-project images 
docker-compose -p my-project ps 
docker-compose -p my-project top 



####### 실습 #########
mkdir grafana-test 
cd grafana-test
touch docker-compose.yml

version: '3.9'
##############
services:
  grafana:
    image: grafana/grafana:8.2.2
    restart: unless-stopped
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel
    ports:
    - 3000:3000
    volumes:
    - ./files/grafana.ini:/etc/grafana/grafana.ini:ro
    - grafana-data:/var/lib/grafana
    logging:
      driver: "json-file"
      options:
        max-size: "8m"
        max-file: "10"

volumes:
  grafana-data: {}
##############

mkdir files
cd files 
touch grafana.ini 
##############
app_mode = production
instance_name = ${HOSTNAME}

[server]
protocol = http
http_addr = 
http_port = 3000

[log]
mode = console
level = info

[alerting]
enabled = true
##############
docker-compose up -d 




### mysql 연결한 grafana 버전 ### 
docker-compose.yml 
##############
version: '3.9'

services:
  db:
    image: mysql:5.7
    restart: unless-stopped
    environment:
      MYSQL_PASSWORD: grafana
      MYSQL_DATABASE: grafana
      MYSQL_USER: grafana
      MYSQL_PASSWORD: grafana
    volumes:
    - mysql-data:/var/lib/mysql
    logging:
      driver: "json-file"
      options:
        max-size: "8m"
        max-file: "10"

  grafana:
    depends_on:
    - db
    image: grafana/grafana:8.2.2
    restart: unless-stopped
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel
    ports:
    - 3000:3000
    volumes:
    - ./files/grafana.ini:/etc/grafana/grafana.ini:ro
    - grafana-data:/var/lib/grafana
    logging:
      driver: "json-file"
      options:
        max-size: "8m"
        max-file: "10"

volumes:
  mysql-data: {}
  grafana-data: {}
##############

grafana.ini
##############
app_mode = production
instance_name = ${HOSTNAME}

[server]
protocol = http
http_addr = 
http_port = 3000

[database]
type = mysql
host = db:3306
name = grafana 
user = grafana
password = grafana

[log]
mode = console
level = info

[alerting]
enabled = true
##############
docker-compose up -d 

