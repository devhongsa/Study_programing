Redis(Remote Dictionary Server)
redis 특징
Redis는 in-memory db 이기 때문에, 디스크에 저장하지 않고 메모리에 저장함.
메모리는 읽고 쓰는 속도가 디스크보다 약 40배가량 빠르지만 휘발성이라는 단점이 있음. 

redis의 가장 중요한 기능은 cache이다 이는 대규모 I/O처리에 적합한데
웹서버가 만약 수천만명의 요청에 의해 매번 데이터베이스에서 데이터를 꺼내온다면 퍼포먼스가 현저하게 떨어질것이다.
근데 그 데이터가 만약 자주 변경이 일어나지 않는 데이터라면 cache에 저장해놓고 바로바로 꺼내다가 쓰면 디비의 부하도 낮추고
요청응답시간도 현저하게 줄어들 것이다. 또한 좋아요나 채팅같은 대규모 요청이 있는 앱같은경우에도 cache에 데이터를 쌓아놓다가 
일정주기마다 데이터베이스에 업데이트해주면, 디비의 부하를 낮출 수 있게된다. 

디스크에 저장하는 데이터는 영속성을 유지해야하는 데이터를 위주로 저장하고(회원정보와 같은)
Redis는 로그인세션과 같이, 데이터가 날아가도 유저에게 치명적이지 않은 데이터를 위주로 저장하게 된다.
로그인세션, 리스트 형태의 데이터에서 효율이 좋음.

key-value store 방식 
    hash를 이용해 값을 바로 읽으므로 속도가 빠름 
    수평적 확장성이 뛰어남.(관계형 DB같은 경우 서로 연관이 있는 table들이 많아서 DB를 여러 서버에 나눈다고 했을 때, 이런 연관성때문에 수평적 확장이 어려움.)
    단점 key를 통해서만 값을 읽을 수가 있음
    범위 검색과 같은 복잡한 쿼리가 불가능 

단점
  휘발성 : AOF, RDB 복구 기술을 통해 극복 가능 
  Single Thread : 데이터 정합성을 위해 싱글 스레드로 구현
  Memory Fragmetation : 데이터가 없는 공간인데도 있다고 판단해서 데이터를 넣지 못하는 현상이 있을 수 있음. 주기적으로 이런 것들을 지워줘야함.
  Big Size Data 에 부적합 

Redis vs MemCached
1. Data Type
  redis는 여러 데이터 타입 지원 
  memcached는 String 타입만 지원 
2. Thread 
  redis - Single Thread 
  memcached - Multi Thread 
3. Scale 
  redis - scale out (서버를 여러대로 늘리기)
  memcached - scale up (서버 성능 높이기)
4. memory policy 
  redis - no eviction, lru, ttl, random 
  memcached - lru 
5. persistence 
  redis - aof, rdb 
  memcached - none 

####################################################################
redis 설치 
####################################################################
linux 
sudo su : super user권한으로 변경, 이후 sudo 안쓰고 명령어 실행 가능 
sudo apt-get update 
sudo apt-get upgrade 
sudo apt-get install redis-server
redis-server --version

service redis status 
cd /etc/redis  > vi redis.conf 
redis-cli > info 
service redis start 
service redis stop 

macos 
brew install redis

docker로 설치
docker pull redis
docker run --name my-redis -p 6379:6379 redis
docker stop my-redis
docker start my-redis 
docker exec -it my-redis /bin/sh  : redis서버 커멘트쉘 실행 

redis-server : redis 서버 실행
redis-cli : redis 클라이언트 커맨트창 실행 
exit : 빠져나오기 

brew services start redis : 터미널 창을 닫아도 서버 계속 실행 
brew services stop redis 

tail -f /var/log/redis/redis-server.log  : 로그 확인하기 


####################################################################
redis 기본 명령어 모음
####################################################################
redis-cli 
keys * : 모든 키 보기, 성능에 영향을 주는 명령어라서 개발단계에서만 씀.
dbsize : key 몇개 있는지 
flushall : 모든 key-value 지우기 

** Strings
set key1 banana  : key-value 쓰기 
get key1 : key-value 읽기
del key1 : 데이터 지우기 
incr mycount : value값이 int로 취급하여 1 증가시키기 (데이터 원자성 보장: 여러서버가 동시에 수행해도 원자성 보장, value가 int가 아니면 오류)
decr mycount : 1감소시키기 
mset key1 milk key2 coffe : 여러 키에 대한 값을 한번에 저장
mget key1 key2 : 여러 키 값 한번에 get 

** Lists (linked list로 구현되어 있음)
lpush mylist apple : list 왼쪽에 요소 삽입
rpush mylist banana 
llen mylist : list의 길이
lrange 0 -1 : 0인덱스에서 -1(맨끝)까지의 데이터를 리턴
lpop mylist : list 맨 왼쪽요소 추출 (맨왼쪽요소를 리스트에서 삭제하고 나서 가져옴)
rpop mylist 

** Sets (중복된 데이터가 들어가지 않음. 검색이 빠름. 인덱스로 데이터 접근 불가)
sadd myset apple : set에 데이터 추가 (set은 위치인덱스로 데이터를 찾을 수 없음)
srem myset apple : 데이터 삭제 
scard myset : set의 저장된 아이템 개수 반환 
smembers myset : 저장된 아이템들 반환 
sismember myset apple : 특정값이 set에 포함되어 있는지 확인 (있으면 1 없으면 0)

** Sorted Sets
zadd myrank 1 apple 20 banana 30 grape : sorted set은 score값을 함께 넣어줘야함. score는 set에 순서를 부여해줌.
zrange myrank 0 1 withscores : score가 큰순서대로 0부터 1까지  
zrank myrank banana : 특정 값이 어떤 순위를 가지고 있는지 
zrevrank myrank banana : 내림차순 정렬일때 순위
zrangebyscore myrank 20 30 withscores : 20~30사이의 점수를 가진 값들 함께 조회 
zscore myrank apple : 특정 멤버의 score 조회
zpopmin
zpipmax
zrem myrank apple

** hash 
hset user1 name bear age 10  : key는 user1이 되고 value에 field-value 쌍이 저장됨. (name: bear, age: 10)
hget user1 name : "bear"
hmget user1 name age : 1) "bear" 2) "10"
hincrby user1 count 2 : count필드의 값을 2 증가시킴 
hkeys user1 : 모든 필드 보여줌 
hdel user1 name

** Streams
xadd 
xlen
xrange
xread
xdel


#####################################################
redis conf 설정 
#####################################################

# vi 편집기로 설정 파일 조회(redis.conf)
sudo vi /etc/redis/redis.conf
혹은 redis-cli 후에 config set maxmemory 500mb , config get maxmemory : 현재 maxmemory 설정상태 보기 
근데 redis-cli로 config설정을 하면 서버가 내려갔다 다시 올라오면 초기화 되기 때문에 conf파일에서 직접 수정해주는 것이 좋음.

# 최대 메모리 사양
# ->    최대 사용 메모리 사양을 설정한다. ec2의 메모리 성능에 따라서 설정을 달리 해준다. 단위는 mb나 g 등 필요에 맞춰 적어주면된다.
maxmemory 256mb            

# 메모리 초과 사용 시 후처리 방식 설정
# ->    지금 설정한 allkeys-lru 옵션은 가장 오래된 데이터를 삭제하고, 새로운 데이터를 저장하는 옵션이다.
maxmemory-policy allkeys-lru

# 프로세스 포트
# ->    port 부분은 초기에 주석처리가 되어 있는데, 디폴트 값으로 6379 포트에서 동작한다. 
# ->    만약, 6379가 아닌 다른 포트를 설정하고 싶다면 주석을 해제하고 포트번호를 입력하면된다.
port 1234

# 외부접속 허용
# ->    기본 실행 환경은 localhost(127.0.0.1)로 되어있다.
# ->    만약, 모든 외부접속에 대한 허용을 하고 싶다면, 0.0.0.0 으로 변경하면 된다.
bind 0.0.0.0

# 비밀번호 설정
# ->    서버 접속에 비밀번호를 적용시키고 싶다면 아래와 같이 수정하자.
requirepass [접속 패스워드 입력]

# 암호화된 비밀번호가 필요하다면, 터미널에 다음 명령어로 생성 가능하다.
echo "MyPassword" | sha256sum
####################################################################



####################################################################
redis 복구  : 패캠 대용량 트래픽 Part3 - Ch.10 
####################################################################
docker run -v $(pwd)/redis.conf:/redis.conf --name my-redis redis redis-server /redis.conf
1. RDB 
redis.conf 에서 복구 정책 관련 옵션 수정 가능 
save 60 10 : 60초마다 10개의 변경점이 있으면 dump.db 스냅샷 파일 생성
bgsave : 수동으로 스냅샷파일 만들기 


2. AOF
redis서버에서 실행되었던 모든 명령어들을 저장해두었다가, 재시작시 그 명령어들을 다시 재실행 
단점 : RDB 방식보다 파일 사이즈가 커짐 , 백업 복구 속도가 느림 
redis.conf 
appendonly yes : aof 방식 사용 
appendfilename appendonly.aof : 복구 파일이름 설정 
appendfsync (always, everysec, no) : fsync의 3가지 정책중 하나 선택, fsycn()호출은 OS에게 데이터를 디스크에 쓰도록함.
always : 커맨드가 실행될때마다 저장 , 성능저하가 심해서 잘 사용안함.
everysec : 1초마다 수행 , RDB성능과 비슷하여 이 옵션을 많이 사용함.
no : OS에 맡김 


3. Replica 복제 
	master redis ec2를 복제해서 replica ec2 하나 새로 생성 
	보안그룹 설정에서 사용자 지정 TCP 6379 포트 열어줘야함. 그래야 master ec2의 redis 데이터를 복사해올수 있음. ip는 같은 보안그룹을 쓰는 ip에 대해서만 열어주기
백업만으로는 장애 대비에 부족 (백업실패, 복구시간)
아예 다른 노드로 미리 복제해 놓는 것 
master가 죽었을 경우 replica 중 하나를 master로 전환해 즉시 서비스 정상화 가능 (sentinel)

redis.conf 
replicaof [master ip] 6379 : master서버의 6379포트에서 동작하고 있는 redis서버를 계속 복제해옴. 
conf 파일에 들어가서 바꿔줘도 되고 redis-cli 실행해서 replicaof [ip] [port] 해줘도 됨.(conf파일에서 하는것을 권장 )

master 노드는 rdb나 aof를 설정하고 있어야함.
만약 마스터노드가 백업설정을 안해놓은 상태에서 꺼지게 되면 비어있는 redis를 replica 노드가 복제해 오기 때문임.
replica-read-only 

docker-compose.yml 파일로도 master, secondery 노드 실행가능 

4. Sentinel 사용 
master가 죽었을때 replica를 자동으로 master로 바꿔주는 구조 , 만약 master가 죽어서 replica가 master가 되면 기존에 master였던 서버는 replica(slave)로 자동전환된다.
sentinel은 기본적으로 3개이상의 홀수 개수로 구성한다. 과반 이상의 sentinel이 master 서버의 장애를 감지했을때 replica 서버를 master로 전환한다. 

master, replica ec2에서 각각 sentinel 설치, 그리고 sentinel 전용 ec2에서도 sentinel 설치 
apt-get update 
apt-get install redis-sentinel 

cd /etc/redis/ 
vi sentinel.conf 
bind 부분은 자신의 ec2 ip주소와 bind하게 한다. (bind 172.31.10.32 127.0.0.1 ssl)
sentinel monitor mymaster [masterIp] 6379 2 : 모든 sentinel에서 마스터 ip를 설정해주고, 2는 2개의 sentinel이 master의 장애를 감지했을때 replica로 마스터를
전환하라는 뜻임.
service redist-sentinel restart 

그리고 보안그룹 인바운드 규칙에서도 sentinel port인 26379 포트를 열어줘야함 
사용자지정 TCP 26379포트 열고 같은 보안그룹 Ip만 허용으로 설정 

Spring에서 sentinel 구성시 
RedisConfig에서 Sentinel 관련 설정 필요 
application.yml 에서 redis.sentinel 관련 설정 필요 



####################################################################
redis stress test 
####################################################################

redis-benchmark 

-h : host 주소
-p : port 번호
-c : 클라이언트 수
-n : 요청 횟수
-d : 데이터 사이즈  3 (Byte)
-k : 클라이언트 커넥션 유지 여부  1(유지)
-r : 요청할 key 범위 
-t : 커맨드 (hset, zrange... )


####################################################################
redis-cli 옵션 명령어 
####################################################################
info 
save 
bgsave 
bgrewriteaof 
configrewrite : config set 으로 변경했던 설정을 conf파일에 적용시킴.
client kill : 특정 클라이언트의 연결을 해제함.
monitor : 서버에서 실행되는 명령들을 보여준다. 
slowlog 
	slowlog-log-slower-than 에 설정된 시간이상의 작업이 발생되었을시 log로 남긴다 (microseconds 단위)
	slowlog get # : 해당 숫자 만큼 로그를 가져와서 보여준다. 
	slowlog-max-len # : 해당 숫자 만큼 로그를 저장할 수 있다.

latency
	latency-monitor-threshold 
